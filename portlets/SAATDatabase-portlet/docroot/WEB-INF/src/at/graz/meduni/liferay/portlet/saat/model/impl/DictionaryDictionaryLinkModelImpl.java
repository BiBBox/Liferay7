/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.graz.meduni.liferay.portlet.saat.model.impl;

import aQute.bnd.annotation.ProviderType;

import at.graz.meduni.liferay.portlet.saat.model.DictionaryDictionaryLink;
import at.graz.meduni.liferay.portlet.saat.model.DictionaryDictionaryLinkModel;
import at.graz.meduni.liferay.portlet.saat.model.DictionaryDictionaryLinkSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the DictionaryDictionaryLink service. Represents a row in the &quot;saat_DictionaryDictionaryLink&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link DictionaryDictionaryLinkModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DictionaryDictionaryLinkImpl}.
 * </p>
 *
 * @author reihsr
 * @see DictionaryDictionaryLinkImpl
 * @see DictionaryDictionaryLink
 * @see DictionaryDictionaryLinkModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class DictionaryDictionaryLinkModelImpl extends BaseModelImpl<DictionaryDictionaryLink>
	implements DictionaryDictionaryLinkModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dictionary dictionary link model instance should use the {@link DictionaryDictionaryLink} interface instead.
	 */
	public static final String TABLE_NAME = "saat_DictionaryDictionaryLink";
	public static final Object[][] TABLE_COLUMNS = {
			{ "dictionaryDictionaryLinkId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "dictionaryId", Types.BIGINT },
			{ "dictionaryAddictionId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("dictionaryDictionaryLinkId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dictionaryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dictionaryAddictionId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table saat_DictionaryDictionaryLink (dictionaryDictionaryLinkId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,dictionaryId LONG,dictionaryAddictionId LONG)";
	public static final String TABLE_SQL_DROP = "drop table saat_DictionaryDictionaryLink";
	public static final String ORDER_BY_JPQL = " ORDER BY dictionaryDictionaryLink.dictionaryDictionaryLinkId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY saat_DictionaryDictionaryLink.dictionaryDictionaryLinkId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.at.graz.meduni.liferay.portlet.saat.model.DictionaryDictionaryLink"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.at.graz.meduni.liferay.portlet.saat.model.DictionaryDictionaryLink"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.at.graz.meduni.liferay.portlet.saat.model.DictionaryDictionaryLink"),
			true);
	public static final long DICTIONARYADDICTIONID_COLUMN_BITMASK = 1L;
	public static final long DICTIONARYID_COLUMN_BITMASK = 2L;
	public static final long DICTIONARYDICTIONARYLINKID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DictionaryDictionaryLink toModel(
		DictionaryDictionaryLinkSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DictionaryDictionaryLink model = new DictionaryDictionaryLinkImpl();

		model.setDictionaryDictionaryLinkId(soapModel.getDictionaryDictionaryLinkId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setDictionaryId(soapModel.getDictionaryId());
		model.setDictionaryAddictionId(soapModel.getDictionaryAddictionId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DictionaryDictionaryLink> toModels(
		DictionaryDictionaryLinkSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DictionaryDictionaryLink> models = new ArrayList<DictionaryDictionaryLink>(soapModels.length);

		for (DictionaryDictionaryLinkSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.at.graz.meduni.liferay.portlet.saat.model.DictionaryDictionaryLink"));

	public DictionaryDictionaryLinkModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dictionaryDictionaryLinkId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDictionaryDictionaryLinkId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dictionaryDictionaryLinkId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DictionaryDictionaryLink.class;
	}

	@Override
	public String getModelClassName() {
		return DictionaryDictionaryLink.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("dictionaryDictionaryLinkId",
			getDictionaryDictionaryLinkId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("dictionaryId", getDictionaryId());
		attributes.put("dictionaryAddictionId", getDictionaryAddictionId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long dictionaryDictionaryLinkId = (Long)attributes.get(
				"dictionaryDictionaryLinkId");

		if (dictionaryDictionaryLinkId != null) {
			setDictionaryDictionaryLinkId(dictionaryDictionaryLinkId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long dictionaryId = (Long)attributes.get("dictionaryId");

		if (dictionaryId != null) {
			setDictionaryId(dictionaryId);
		}

		Long dictionaryAddictionId = (Long)attributes.get(
				"dictionaryAddictionId");

		if (dictionaryAddictionId != null) {
			setDictionaryAddictionId(dictionaryAddictionId);
		}
	}

	@JSON
	@Override
	public long getDictionaryDictionaryLinkId() {
		return _dictionaryDictionaryLinkId;
	}

	@Override
	public void setDictionaryDictionaryLinkId(long dictionaryDictionaryLinkId) {
		_columnBitmask = -1L;

		_dictionaryDictionaryLinkId = dictionaryDictionaryLinkId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getDictionaryId() {
		return _dictionaryId;
	}

	@Override
	public void setDictionaryId(long dictionaryId) {
		_columnBitmask |= DICTIONARYID_COLUMN_BITMASK;

		if (!_setOriginalDictionaryId) {
			_setOriginalDictionaryId = true;

			_originalDictionaryId = _dictionaryId;
		}

		_dictionaryId = dictionaryId;
	}

	public long getOriginalDictionaryId() {
		return _originalDictionaryId;
	}

	@JSON
	@Override
	public long getDictionaryAddictionId() {
		return _dictionaryAddictionId;
	}

	@Override
	public void setDictionaryAddictionId(long dictionaryAddictionId) {
		_columnBitmask |= DICTIONARYADDICTIONID_COLUMN_BITMASK;

		if (!_setOriginalDictionaryAddictionId) {
			_setOriginalDictionaryAddictionId = true;

			_originalDictionaryAddictionId = _dictionaryAddictionId;
		}

		_dictionaryAddictionId = dictionaryAddictionId;
	}

	public long getOriginalDictionaryAddictionId() {
		return _originalDictionaryAddictionId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			DictionaryDictionaryLink.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DictionaryDictionaryLink toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DictionaryDictionaryLink)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DictionaryDictionaryLinkImpl dictionaryDictionaryLinkImpl = new DictionaryDictionaryLinkImpl();

		dictionaryDictionaryLinkImpl.setDictionaryDictionaryLinkId(getDictionaryDictionaryLinkId());
		dictionaryDictionaryLinkImpl.setCompanyId(getCompanyId());
		dictionaryDictionaryLinkImpl.setUserId(getUserId());
		dictionaryDictionaryLinkImpl.setUserName(getUserName());
		dictionaryDictionaryLinkImpl.setCreateDate(getCreateDate());
		dictionaryDictionaryLinkImpl.setModifiedDate(getModifiedDate());
		dictionaryDictionaryLinkImpl.setDictionaryId(getDictionaryId());
		dictionaryDictionaryLinkImpl.setDictionaryAddictionId(getDictionaryAddictionId());

		dictionaryDictionaryLinkImpl.resetOriginalValues();

		return dictionaryDictionaryLinkImpl;
	}

	@Override
	public int compareTo(DictionaryDictionaryLink dictionaryDictionaryLink) {
		int value = 0;

		if (getDictionaryDictionaryLinkId() < dictionaryDictionaryLink.getDictionaryDictionaryLinkId()) {
			value = -1;
		}
		else if (getDictionaryDictionaryLinkId() > dictionaryDictionaryLink.getDictionaryDictionaryLinkId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DictionaryDictionaryLink)) {
			return false;
		}

		DictionaryDictionaryLink dictionaryDictionaryLink = (DictionaryDictionaryLink)obj;

		long primaryKey = dictionaryDictionaryLink.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		DictionaryDictionaryLinkModelImpl dictionaryDictionaryLinkModelImpl = this;

		dictionaryDictionaryLinkModelImpl._setModifiedDate = false;

		dictionaryDictionaryLinkModelImpl._originalDictionaryId = dictionaryDictionaryLinkModelImpl._dictionaryId;

		dictionaryDictionaryLinkModelImpl._setOriginalDictionaryId = false;

		dictionaryDictionaryLinkModelImpl._originalDictionaryAddictionId = dictionaryDictionaryLinkModelImpl._dictionaryAddictionId;

		dictionaryDictionaryLinkModelImpl._setOriginalDictionaryAddictionId = false;

		dictionaryDictionaryLinkModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DictionaryDictionaryLink> toCacheModel() {
		DictionaryDictionaryLinkCacheModel dictionaryDictionaryLinkCacheModel = new DictionaryDictionaryLinkCacheModel();

		dictionaryDictionaryLinkCacheModel.dictionaryDictionaryLinkId = getDictionaryDictionaryLinkId();

		dictionaryDictionaryLinkCacheModel.companyId = getCompanyId();

		dictionaryDictionaryLinkCacheModel.userId = getUserId();

		dictionaryDictionaryLinkCacheModel.userName = getUserName();

		String userName = dictionaryDictionaryLinkCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			dictionaryDictionaryLinkCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			dictionaryDictionaryLinkCacheModel.createDate = createDate.getTime();
		}
		else {
			dictionaryDictionaryLinkCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dictionaryDictionaryLinkCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dictionaryDictionaryLinkCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		dictionaryDictionaryLinkCacheModel.dictionaryId = getDictionaryId();

		dictionaryDictionaryLinkCacheModel.dictionaryAddictionId = getDictionaryAddictionId();

		return dictionaryDictionaryLinkCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{dictionaryDictionaryLinkId=");
		sb.append(getDictionaryDictionaryLinkId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", dictionaryId=");
		sb.append(getDictionaryId());
		sb.append(", dictionaryAddictionId=");
		sb.append(getDictionaryAddictionId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append(
			"at.graz.meduni.liferay.portlet.saat.model.DictionaryDictionaryLink");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>dictionaryDictionaryLinkId</column-name><column-value><![CDATA[");
		sb.append(getDictionaryDictionaryLinkId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dictionaryId</column-name><column-value><![CDATA[");
		sb.append(getDictionaryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dictionaryAddictionId</column-name><column-value><![CDATA[");
		sb.append(getDictionaryAddictionId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = DictionaryDictionaryLink.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			DictionaryDictionaryLink.class
		};
	private long _dictionaryDictionaryLinkId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _dictionaryId;
	private long _originalDictionaryId;
	private boolean _setOriginalDictionaryId;
	private long _dictionaryAddictionId;
	private long _originalDictionaryAddictionId;
	private boolean _setOriginalDictionaryAddictionId;
	private long _columnBitmask;
	private DictionaryDictionaryLink _escapedModel;
}