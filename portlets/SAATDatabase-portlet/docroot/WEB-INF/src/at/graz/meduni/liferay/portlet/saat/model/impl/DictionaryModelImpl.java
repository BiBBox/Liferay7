/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.graz.meduni.liferay.portlet.saat.model.impl;

import aQute.bnd.annotation.ProviderType;

import at.graz.meduni.liferay.portlet.saat.model.Dictionary;
import at.graz.meduni.liferay.portlet.saat.model.DictionaryModel;
import at.graz.meduni.liferay.portlet.saat.model.DictionarySoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Dictionary service. Represents a row in the &quot;saat_Dictionary&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link DictionaryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DictionaryImpl}.
 * </p>
 *
 * @author reihsr
 * @see DictionaryImpl
 * @see Dictionary
 * @see DictionaryModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class DictionaryModelImpl extends BaseModelImpl<Dictionary>
	implements DictionaryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dictionary model instance should use the {@link Dictionary} interface instead.
	 */
	public static final String TABLE_NAME = "saat_Dictionary";
	public static final Object[][] TABLE_COLUMNS = {
			{ "dictionaryId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "isroot", Types.BOOLEAN },
			{ "iscode", Types.BOOLEAN },
			{ "synonym", Types.VARCHAR },
			{ "pattern", Types.VARCHAR },
			{ "beforSynonym", Types.BIGINT },
			{ "afterSynonym", Types.BIGINT },
			{ "foreword", Types.BOOLEAN },
			{ "ending", Types.BOOLEAN },
			{ "sentence", Types.BOOLEAN },
			{ "occure", Types.BOOLEAN },
			{ "nagation", Types.BOOLEAN },
			{ "priority_mode", Types.BOOLEAN },
			{ "codeType", Types.VARCHAR },
			{ "codeValue", Types.VARCHAR },
			{ "priority", Types.BIGINT },
			{ "disease_ids", Types.VARCHAR },
			{ "dirty", Types.BOOLEAN },
			{ "disease_ids_count", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("dictionaryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("isroot", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("iscode", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("synonym", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pattern", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("beforSynonym", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("afterSynonym", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("foreword", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("ending", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("sentence", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("occure", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("nagation", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("priority_mode", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("codeType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("codeValue", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("priority", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("disease_ids", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dirty", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("disease_ids_count", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table saat_Dictionary (dictionaryId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,isroot BOOLEAN,iscode BOOLEAN,synonym VARCHAR(75) null,pattern VARCHAR(75) null,beforSynonym LONG,afterSynonym LONG,foreword BOOLEAN,ending BOOLEAN,sentence BOOLEAN,occure BOOLEAN,nagation BOOLEAN,priority_mode BOOLEAN,codeType VARCHAR(75) null,codeValue VARCHAR(75) null,priority LONG,disease_ids VARCHAR(75) null,dirty BOOLEAN,disease_ids_count LONG)";
	public static final String TABLE_SQL_DROP = "drop table saat_Dictionary";
	public static final String ORDER_BY_JPQL = " ORDER BY dictionary.dictionaryId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY saat_Dictionary.dictionaryId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.at.graz.meduni.liferay.portlet.saat.model.Dictionary"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.at.graz.meduni.liferay.portlet.saat.model.Dictionary"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.at.graz.meduni.liferay.portlet.saat.model.Dictionary"),
			true);
	public static final long CODETYPE_COLUMN_BITMASK = 1L;
	public static final long DICTIONARYID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Dictionary toModel(DictionarySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Dictionary model = new DictionaryImpl();

		model.setDictionaryId(soapModel.getDictionaryId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setIsroot(soapModel.getIsroot());
		model.setIscode(soapModel.getIscode());
		model.setSynonym(soapModel.getSynonym());
		model.setPattern(soapModel.getPattern());
		model.setBeforSynonym(soapModel.getBeforSynonym());
		model.setAfterSynonym(soapModel.getAfterSynonym());
		model.setForeword(soapModel.getForeword());
		model.setEnding(soapModel.getEnding());
		model.setSentence(soapModel.getSentence());
		model.setOccure(soapModel.getOccure());
		model.setNagation(soapModel.getNagation());
		model.setPriority_mode(soapModel.getPriority_mode());
		model.setCodeType(soapModel.getCodeType());
		model.setCodeValue(soapModel.getCodeValue());
		model.setPriority(soapModel.getPriority());
		model.setDisease_ids(soapModel.getDisease_ids());
		model.setDirty(soapModel.getDirty());
		model.setDisease_ids_count(soapModel.getDisease_ids_count());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Dictionary> toModels(DictionarySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Dictionary> models = new ArrayList<Dictionary>(soapModels.length);

		for (DictionarySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.at.graz.meduni.liferay.portlet.saat.model.Dictionary"));

	public DictionaryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dictionaryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDictionaryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dictionaryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Dictionary.class;
	}

	@Override
	public String getModelClassName() {
		return Dictionary.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("dictionaryId", getDictionaryId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("isroot", getIsroot());
		attributes.put("iscode", getIscode());
		attributes.put("synonym", getSynonym());
		attributes.put("pattern", getPattern());
		attributes.put("beforSynonym", getBeforSynonym());
		attributes.put("afterSynonym", getAfterSynonym());
		attributes.put("foreword", getForeword());
		attributes.put("ending", getEnding());
		attributes.put("sentence", getSentence());
		attributes.put("occure", getOccure());
		attributes.put("nagation", getNagation());
		attributes.put("priority_mode", getPriority_mode());
		attributes.put("codeType", getCodeType());
		attributes.put("codeValue", getCodeValue());
		attributes.put("priority", getPriority());
		attributes.put("disease_ids", getDisease_ids());
		attributes.put("dirty", getDirty());
		attributes.put("disease_ids_count", getDisease_ids_count());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long dictionaryId = (Long)attributes.get("dictionaryId");

		if (dictionaryId != null) {
			setDictionaryId(dictionaryId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Boolean isroot = (Boolean)attributes.get("isroot");

		if (isroot != null) {
			setIsroot(isroot);
		}

		Boolean iscode = (Boolean)attributes.get("iscode");

		if (iscode != null) {
			setIscode(iscode);
		}

		String synonym = (String)attributes.get("synonym");

		if (synonym != null) {
			setSynonym(synonym);
		}

		String pattern = (String)attributes.get("pattern");

		if (pattern != null) {
			setPattern(pattern);
		}

		Long beforSynonym = (Long)attributes.get("beforSynonym");

		if (beforSynonym != null) {
			setBeforSynonym(beforSynonym);
		}

		Long afterSynonym = (Long)attributes.get("afterSynonym");

		if (afterSynonym != null) {
			setAfterSynonym(afterSynonym);
		}

		Boolean foreword = (Boolean)attributes.get("foreword");

		if (foreword != null) {
			setForeword(foreword);
		}

		Boolean ending = (Boolean)attributes.get("ending");

		if (ending != null) {
			setEnding(ending);
		}

		Boolean sentence = (Boolean)attributes.get("sentence");

		if (sentence != null) {
			setSentence(sentence);
		}

		Boolean occure = (Boolean)attributes.get("occure");

		if (occure != null) {
			setOccure(occure);
		}

		Boolean nagation = (Boolean)attributes.get("nagation");

		if (nagation != null) {
			setNagation(nagation);
		}

		Boolean priority_mode = (Boolean)attributes.get("priority_mode");

		if (priority_mode != null) {
			setPriority_mode(priority_mode);
		}

		String codeType = (String)attributes.get("codeType");

		if (codeType != null) {
			setCodeType(codeType);
		}

		String codeValue = (String)attributes.get("codeValue");

		if (codeValue != null) {
			setCodeValue(codeValue);
		}

		Long priority = (Long)attributes.get("priority");

		if (priority != null) {
			setPriority(priority);
		}

		String disease_ids = (String)attributes.get("disease_ids");

		if (disease_ids != null) {
			setDisease_ids(disease_ids);
		}

		Boolean dirty = (Boolean)attributes.get("dirty");

		if (dirty != null) {
			setDirty(dirty);
		}

		Long disease_ids_count = (Long)attributes.get("disease_ids_count");

		if (disease_ids_count != null) {
			setDisease_ids_count(disease_ids_count);
		}
	}

	@JSON
	@Override
	public long getDictionaryId() {
		return _dictionaryId;
	}

	@Override
	public void setDictionaryId(long dictionaryId) {
		_columnBitmask = -1L;

		_dictionaryId = dictionaryId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public boolean getIsroot() {
		return _isroot;
	}

	@Override
	public boolean isIsroot() {
		return _isroot;
	}

	@Override
	public void setIsroot(boolean isroot) {
		_isroot = isroot;
	}

	@JSON
	@Override
	public boolean getIscode() {
		return _iscode;
	}

	@Override
	public boolean isIscode() {
		return _iscode;
	}

	@Override
	public void setIscode(boolean iscode) {
		_iscode = iscode;
	}

	@JSON
	@Override
	public String getSynonym() {
		if (_synonym == null) {
			return StringPool.BLANK;
		}
		else {
			return _synonym;
		}
	}

	@Override
	public void setSynonym(String synonym) {
		_synonym = synonym;
	}

	@JSON
	@Override
	public String getPattern() {
		if (_pattern == null) {
			return StringPool.BLANK;
		}
		else {
			return _pattern;
		}
	}

	@Override
	public void setPattern(String pattern) {
		_pattern = pattern;
	}

	@JSON
	@Override
	public long getBeforSynonym() {
		return _beforSynonym;
	}

	@Override
	public void setBeforSynonym(long beforSynonym) {
		_beforSynonym = beforSynonym;
	}

	@JSON
	@Override
	public long getAfterSynonym() {
		return _afterSynonym;
	}

	@Override
	public void setAfterSynonym(long afterSynonym) {
		_afterSynonym = afterSynonym;
	}

	@JSON
	@Override
	public boolean getForeword() {
		return _foreword;
	}

	@Override
	public boolean isForeword() {
		return _foreword;
	}

	@Override
	public void setForeword(boolean foreword) {
		_foreword = foreword;
	}

	@JSON
	@Override
	public boolean getEnding() {
		return _ending;
	}

	@Override
	public boolean isEnding() {
		return _ending;
	}

	@Override
	public void setEnding(boolean ending) {
		_ending = ending;
	}

	@JSON
	@Override
	public boolean getSentence() {
		return _sentence;
	}

	@Override
	public boolean isSentence() {
		return _sentence;
	}

	@Override
	public void setSentence(boolean sentence) {
		_sentence = sentence;
	}

	@JSON
	@Override
	public boolean getOccure() {
		return _occure;
	}

	@Override
	public boolean isOccure() {
		return _occure;
	}

	@Override
	public void setOccure(boolean occure) {
		_occure = occure;
	}

	@JSON
	@Override
	public boolean getNagation() {
		return _nagation;
	}

	@Override
	public boolean isNagation() {
		return _nagation;
	}

	@Override
	public void setNagation(boolean nagation) {
		_nagation = nagation;
	}

	@JSON
	@Override
	public boolean getPriority_mode() {
		return _priority_mode;
	}

	@Override
	public boolean isPriority_mode() {
		return _priority_mode;
	}

	@Override
	public void setPriority_mode(boolean priority_mode) {
		_priority_mode = priority_mode;
	}

	@JSON
	@Override
	public String getCodeType() {
		if (_codeType == null) {
			return StringPool.BLANK;
		}
		else {
			return _codeType;
		}
	}

	@Override
	public void setCodeType(String codeType) {
		_columnBitmask |= CODETYPE_COLUMN_BITMASK;

		if (_originalCodeType == null) {
			_originalCodeType = _codeType;
		}

		_codeType = codeType;
	}

	public String getOriginalCodeType() {
		return GetterUtil.getString(_originalCodeType);
	}

	@JSON
	@Override
	public String getCodeValue() {
		if (_codeValue == null) {
			return StringPool.BLANK;
		}
		else {
			return _codeValue;
		}
	}

	@Override
	public void setCodeValue(String codeValue) {
		_codeValue = codeValue;
	}

	@JSON
	@Override
	public long getPriority() {
		return _priority;
	}

	@Override
	public void setPriority(long priority) {
		_priority = priority;
	}

	@JSON
	@Override
	public String getDisease_ids() {
		if (_disease_ids == null) {
			return StringPool.BLANK;
		}
		else {
			return _disease_ids;
		}
	}

	@Override
	public void setDisease_ids(String disease_ids) {
		_disease_ids = disease_ids;
	}

	@JSON
	@Override
	public boolean getDirty() {
		return _dirty;
	}

	@Override
	public boolean isDirty() {
		return _dirty;
	}

	@Override
	public void setDirty(boolean dirty) {
		_dirty = dirty;
	}

	@JSON
	@Override
	public long getDisease_ids_count() {
		return _disease_ids_count;
	}

	@Override
	public void setDisease_ids_count(long disease_ids_count) {
		_disease_ids_count = disease_ids_count;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Dictionary.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Dictionary toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Dictionary)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DictionaryImpl dictionaryImpl = new DictionaryImpl();

		dictionaryImpl.setDictionaryId(getDictionaryId());
		dictionaryImpl.setCompanyId(getCompanyId());
		dictionaryImpl.setUserId(getUserId());
		dictionaryImpl.setUserName(getUserName());
		dictionaryImpl.setCreateDate(getCreateDate());
		dictionaryImpl.setModifiedDate(getModifiedDate());
		dictionaryImpl.setIsroot(getIsroot());
		dictionaryImpl.setIscode(getIscode());
		dictionaryImpl.setSynonym(getSynonym());
		dictionaryImpl.setPattern(getPattern());
		dictionaryImpl.setBeforSynonym(getBeforSynonym());
		dictionaryImpl.setAfterSynonym(getAfterSynonym());
		dictionaryImpl.setForeword(getForeword());
		dictionaryImpl.setEnding(getEnding());
		dictionaryImpl.setSentence(getSentence());
		dictionaryImpl.setOccure(getOccure());
		dictionaryImpl.setNagation(getNagation());
		dictionaryImpl.setPriority_mode(getPriority_mode());
		dictionaryImpl.setCodeType(getCodeType());
		dictionaryImpl.setCodeValue(getCodeValue());
		dictionaryImpl.setPriority(getPriority());
		dictionaryImpl.setDisease_ids(getDisease_ids());
		dictionaryImpl.setDirty(getDirty());
		dictionaryImpl.setDisease_ids_count(getDisease_ids_count());

		dictionaryImpl.resetOriginalValues();

		return dictionaryImpl;
	}

	@Override
	public int compareTo(Dictionary dictionary) {
		int value = 0;

		if (getDictionaryId() < dictionary.getDictionaryId()) {
			value = -1;
		}
		else if (getDictionaryId() > dictionary.getDictionaryId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Dictionary)) {
			return false;
		}

		Dictionary dictionary = (Dictionary)obj;

		long primaryKey = dictionary.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		DictionaryModelImpl dictionaryModelImpl = this;

		dictionaryModelImpl._setModifiedDate = false;

		dictionaryModelImpl._originalCodeType = dictionaryModelImpl._codeType;

		dictionaryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Dictionary> toCacheModel() {
		DictionaryCacheModel dictionaryCacheModel = new DictionaryCacheModel();

		dictionaryCacheModel.dictionaryId = getDictionaryId();

		dictionaryCacheModel.companyId = getCompanyId();

		dictionaryCacheModel.userId = getUserId();

		dictionaryCacheModel.userName = getUserName();

		String userName = dictionaryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			dictionaryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			dictionaryCacheModel.createDate = createDate.getTime();
		}
		else {
			dictionaryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dictionaryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dictionaryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		dictionaryCacheModel.isroot = getIsroot();

		dictionaryCacheModel.iscode = getIscode();

		dictionaryCacheModel.synonym = getSynonym();

		String synonym = dictionaryCacheModel.synonym;

		if ((synonym != null) && (synonym.length() == 0)) {
			dictionaryCacheModel.synonym = null;
		}

		dictionaryCacheModel.pattern = getPattern();

		String pattern = dictionaryCacheModel.pattern;

		if ((pattern != null) && (pattern.length() == 0)) {
			dictionaryCacheModel.pattern = null;
		}

		dictionaryCacheModel.beforSynonym = getBeforSynonym();

		dictionaryCacheModel.afterSynonym = getAfterSynonym();

		dictionaryCacheModel.foreword = getForeword();

		dictionaryCacheModel.ending = getEnding();

		dictionaryCacheModel.sentence = getSentence();

		dictionaryCacheModel.occure = getOccure();

		dictionaryCacheModel.nagation = getNagation();

		dictionaryCacheModel.priority_mode = getPriority_mode();

		dictionaryCacheModel.codeType = getCodeType();

		String codeType = dictionaryCacheModel.codeType;

		if ((codeType != null) && (codeType.length() == 0)) {
			dictionaryCacheModel.codeType = null;
		}

		dictionaryCacheModel.codeValue = getCodeValue();

		String codeValue = dictionaryCacheModel.codeValue;

		if ((codeValue != null) && (codeValue.length() == 0)) {
			dictionaryCacheModel.codeValue = null;
		}

		dictionaryCacheModel.priority = getPriority();

		dictionaryCacheModel.disease_ids = getDisease_ids();

		String disease_ids = dictionaryCacheModel.disease_ids;

		if ((disease_ids != null) && (disease_ids.length() == 0)) {
			dictionaryCacheModel.disease_ids = null;
		}

		dictionaryCacheModel.dirty = getDirty();

		dictionaryCacheModel.disease_ids_count = getDisease_ids_count();

		return dictionaryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(49);

		sb.append("{dictionaryId=");
		sb.append(getDictionaryId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", isroot=");
		sb.append(getIsroot());
		sb.append(", iscode=");
		sb.append(getIscode());
		sb.append(", synonym=");
		sb.append(getSynonym());
		sb.append(", pattern=");
		sb.append(getPattern());
		sb.append(", beforSynonym=");
		sb.append(getBeforSynonym());
		sb.append(", afterSynonym=");
		sb.append(getAfterSynonym());
		sb.append(", foreword=");
		sb.append(getForeword());
		sb.append(", ending=");
		sb.append(getEnding());
		sb.append(", sentence=");
		sb.append(getSentence());
		sb.append(", occure=");
		sb.append(getOccure());
		sb.append(", nagation=");
		sb.append(getNagation());
		sb.append(", priority_mode=");
		sb.append(getPriority_mode());
		sb.append(", codeType=");
		sb.append(getCodeType());
		sb.append(", codeValue=");
		sb.append(getCodeValue());
		sb.append(", priority=");
		sb.append(getPriority());
		sb.append(", disease_ids=");
		sb.append(getDisease_ids());
		sb.append(", dirty=");
		sb.append(getDirty());
		sb.append(", disease_ids_count=");
		sb.append(getDisease_ids_count());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(76);

		sb.append("<model><model-name>");
		sb.append("at.graz.meduni.liferay.portlet.saat.model.Dictionary");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>dictionaryId</column-name><column-value><![CDATA[");
		sb.append(getDictionaryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isroot</column-name><column-value><![CDATA[");
		sb.append(getIsroot());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>iscode</column-name><column-value><![CDATA[");
		sb.append(getIscode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>synonym</column-name><column-value><![CDATA[");
		sb.append(getSynonym());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pattern</column-name><column-value><![CDATA[");
		sb.append(getPattern());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>beforSynonym</column-name><column-value><![CDATA[");
		sb.append(getBeforSynonym());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>afterSynonym</column-name><column-value><![CDATA[");
		sb.append(getAfterSynonym());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>foreword</column-name><column-value><![CDATA[");
		sb.append(getForeword());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ending</column-name><column-value><![CDATA[");
		sb.append(getEnding());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sentence</column-name><column-value><![CDATA[");
		sb.append(getSentence());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>occure</column-name><column-value><![CDATA[");
		sb.append(getOccure());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nagation</column-name><column-value><![CDATA[");
		sb.append(getNagation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priority_mode</column-name><column-value><![CDATA[");
		sb.append(getPriority_mode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>codeType</column-name><column-value><![CDATA[");
		sb.append(getCodeType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>codeValue</column-name><column-value><![CDATA[");
		sb.append(getCodeValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priority</column-name><column-value><![CDATA[");
		sb.append(getPriority());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>disease_ids</column-name><column-value><![CDATA[");
		sb.append(getDisease_ids());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dirty</column-name><column-value><![CDATA[");
		sb.append(getDirty());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>disease_ids_count</column-name><column-value><![CDATA[");
		sb.append(getDisease_ids_count());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Dictionary.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Dictionary.class
		};
	private long _dictionaryId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private boolean _isroot;
	private boolean _iscode;
	private String _synonym;
	private String _pattern;
	private long _beforSynonym;
	private long _afterSynonym;
	private boolean _foreword;
	private boolean _ending;
	private boolean _sentence;
	private boolean _occure;
	private boolean _nagation;
	private boolean _priority_mode;
	private String _codeType;
	private String _originalCodeType;
	private String _codeValue;
	private long _priority;
	private String _disease_ids;
	private boolean _dirty;
	private long _disease_ids_count;
	private long _columnBitmask;
	private Dictionary _escapedModel;
}