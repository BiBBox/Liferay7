/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.graz.meduni.bibbox.liferay.portlet.model;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.GroupedModel;
import com.liferay.portal.kernel.model.ShardedModel;
import com.liferay.portal.kernel.service.ServiceContext;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the DockerContainer service. Represents a row in the &quot;bibboxdocker_DockerContainer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link at.graz.meduni.bibbox.liferay.portlet.model.impl.DockerContainerModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link at.graz.meduni.bibbox.liferay.portlet.model.impl.DockerContainerImpl}.
 * </p>
 *
 * @author Robert Reihs
 * @see DockerContainer
 * @see at.graz.meduni.bibbox.liferay.portlet.model.impl.DockerContainerImpl
 * @see at.graz.meduni.bibbox.liferay.portlet.model.impl.DockerContainerModelImpl
 * @generated
 */
@ProviderType
public interface DockerContainerModel extends BaseModel<DockerContainer>,
	GroupedModel, ShardedModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a docker container model instance should use the {@link DockerContainer} interface instead.
	 */

	/**
	 * Returns the primary key of this docker container.
	 *
	 * @return the primary key of this docker container
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this docker container.
	 *
	 * @param primaryKey the primary key of this docker container
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the docker container ID of this docker container.
	 *
	 * @return the docker container ID of this docker container
	 */
	public long getDockerContainerId();

	/**
	 * Sets the docker container ID of this docker container.
	 *
	 * @param dockerContainerId the docker container ID of this docker container
	 */
	public void setDockerContainerId(long dockerContainerId);

	/**
	 * Returns the group ID of this docker container.
	 *
	 * @return the group ID of this docker container
	 */
	@Override
	public long getGroupId();

	/**
	 * Sets the group ID of this docker container.
	 *
	 * @param groupId the group ID of this docker container
	 */
	@Override
	public void setGroupId(long groupId);

	/**
	 * Returns the company ID of this docker container.
	 *
	 * @return the company ID of this docker container
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this docker container.
	 *
	 * @param companyId the company ID of this docker container
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the user ID of this docker container.
	 *
	 * @return the user ID of this docker container
	 */
	@Override
	public long getUserId();

	/**
	 * Sets the user ID of this docker container.
	 *
	 * @param userId the user ID of this docker container
	 */
	@Override
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this docker container.
	 *
	 * @return the user uuid of this docker container
	 */
	@Override
	public String getUserUuid();

	/**
	 * Sets the user uuid of this docker container.
	 *
	 * @param userUuid the user uuid of this docker container
	 */
	@Override
	public void setUserUuid(String userUuid);

	/**
	 * Returns the user name of this docker container.
	 *
	 * @return the user name of this docker container
	 */
	@AutoEscape
	@Override
	public String getUserName();

	/**
	 * Sets the user name of this docker container.
	 *
	 * @param userName the user name of this docker container
	 */
	@Override
	public void setUserName(String userName);

	/**
	 * Returns the create date of this docker container.
	 *
	 * @return the create date of this docker container
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this docker container.
	 *
	 * @param createDate the create date of this docker container
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this docker container.
	 *
	 * @return the modified date of this docker container
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this docker container.
	 *
	 * @param modifiedDate the modified date of this docker container
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the start command of this docker container.
	 *
	 * @return the start command of this docker container
	 */
	@AutoEscape
	public String getStartCommand();

	/**
	 * Sets the start command of this docker container.
	 *
	 * @param startCommand the start command of this docker container
	 */
	public void setStartCommand(String startCommand);

	/**
	 * Returns the tool name of this docker container.
	 *
	 * @return the tool name of this docker container
	 */
	@AutoEscape
	public String getToolName();

	/**
	 * Sets the tool name of this docker container.
	 *
	 * @param toolName the tool name of this docker container
	 */
	public void setToolName(String toolName);

	/**
	 * Returns the instance of this docker container.
	 *
	 * @return the instance of this docker container
	 */
	@AutoEscape
	public String getInstance();

	/**
	 * Sets the instance of this docker container.
	 *
	 * @param instance the instance of this docker container
	 */
	public void setInstance(String instance);

	/**
	 * Returns the port of this docker container.
	 *
	 * @return the port of this docker container
	 */
	@AutoEscape
	public String getPort();

	/**
	 * Sets the port of this docker container.
	 *
	 * @param port the port of this docker container
	 */
	public void setPort(String port);

	/**
	 * Returns the url of this docker container.
	 *
	 * @return the url of this docker container
	 */
	@AutoEscape
	public String getUrl();

	/**
	 * Sets the url of this docker container.
	 *
	 * @param url the url of this docker container
	 */
	public void setUrl(String url);

	/**
	 * Returns the subdomain of this docker container.
	 *
	 * @return the subdomain of this docker container
	 */
	@AutoEscape
	public String getSubdomain();

	/**
	 * Sets the subdomain of this docker container.
	 *
	 * @param subdomain the subdomain of this docker container
	 */
	public void setSubdomain(String subdomain);

	/**
	 * Returns the ip of this docker container.
	 *
	 * @return the ip of this docker container
	 */
	@AutoEscape
	public String getIp();

	/**
	 * Sets the ip of this docker container.
	 *
	 * @param ip the ip of this docker container
	 */
	public void setIp(String ip);

	/**
	 * Returns the display name of this docker container.
	 *
	 * @return the display name of this docker container
	 */
	@AutoEscape
	public String getDisplayName();

	/**
	 * Sets the display name of this docker container.
	 *
	 * @param displayName the display name of this docker container
	 */
	public void setDisplayName(String displayName);

	/**
	 * Returns the display tool name of this docker container.
	 *
	 * @return the display tool name of this docker container
	 */
	@AutoEscape
	public String getDisplayToolName();

	/**
	 * Sets the display tool name of this docker container.
	 *
	 * @param displayToolName the display tool name of this docker container
	 */
	public void setDisplayToolName(String displayToolName);

	/**
	 * Returns the category of this docker container.
	 *
	 * @return the category of this docker container
	 */
	@AutoEscape
	public String getCategory();

	/**
	 * Sets the category of this docker container.
	 *
	 * @param category the category of this docker container
	 */
	public void setCategory(String category);

	/**
	 * Returns the tool of this docker container.
	 *
	 * @return the tool of this docker container
	 */
	@AutoEscape
	public String getTool();

	/**
	 * Sets the tool of this docker container.
	 *
	 * @param tool the tool of this docker container
	 */
	public void setTool(String tool);

	/**
	 * Returns the description of this docker container.
	 *
	 * @return the description of this docker container
	 */
	@AutoEscape
	public String getDescription();

	/**
	 * Sets the description of this docker container.
	 *
	 * @param description the description of this docker container
	 */
	public void setDescription(String description);

	/**
	 * Returns the company of this docker container.
	 *
	 * @return the company of this docker container
	 */
	@AutoEscape
	public String getCompany();

	/**
	 * Sets the company of this docker container.
	 *
	 * @param company the company of this docker container
	 */
	public void setCompany(String company);

	/**
	 * Returns the platform of this docker container.
	 *
	 * @return the platform of this docker container
	 */
	@AutoEscape
	public String getPlatform();

	/**
	 * Sets the platform of this docker container.
	 *
	 * @param platform the platform of this docker container
	 */
	public void setPlatform(String platform);

	/**
	 * Returns the license of this docker container.
	 *
	 * @return the license of this docker container
	 */
	@AutoEscape
	public String getLicense();

	/**
	 * Sets the license of this docker container.
	 *
	 * @param license the license of this docker container
	 */
	public void setLicense(String license);

	/**
	 * Returns the tool description of this docker container.
	 *
	 * @return the tool description of this docker container
	 */
	@AutoEscape
	public String getToolDescription();

	/**
	 * Sets the tool description of this docker container.
	 *
	 * @param toolDescription the tool description of this docker container
	 */
	public void setToolDescription(String toolDescription);

	/**
	 * Returns the logourl of this docker container.
	 *
	 * @return the logourl of this docker container
	 */
	@AutoEscape
	public String getLogourl();

	/**
	 * Sets the logourl of this docker container.
	 *
	 * @param logourl the logourl of this docker container
	 */
	public void setLogourl(String logourl);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public Object clone();

	@Override
	public int compareTo(
		at.graz.meduni.bibbox.liferay.portlet.model.DockerContainer dockerContainer);

	@Override
	public int hashCode();

	@Override
	public CacheModel<at.graz.meduni.bibbox.liferay.portlet.model.DockerContainer> toCacheModel();

	@Override
	public at.graz.meduni.bibbox.liferay.portlet.model.DockerContainer toEscapedModel();

	@Override
	public at.graz.meduni.bibbox.liferay.portlet.model.DockerContainer toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}