/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.graz.meduni.bibbox.liferay.portlet.model.impl;

import aQute.bnd.annotation.ProviderType;

import at.graz.meduni.bibbox.liferay.portlet.model.DockerContainer;
import at.graz.meduni.bibbox.liferay.portlet.model.DockerContainerModel;
import at.graz.meduni.bibbox.liferay.portlet.model.DockerContainerSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the DockerContainer service. Represents a row in the &quot;bibboxdocker_DockerContainer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link DockerContainerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DockerContainerImpl}.
 * </p>
 *
 * @author Robert Reihs
 * @see DockerContainerImpl
 * @see DockerContainer
 * @see DockerContainerModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class DockerContainerModelImpl extends BaseModelImpl<DockerContainer>
	implements DockerContainerModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a docker container model instance should use the {@link DockerContainer} interface instead.
	 */
	public static final String TABLE_NAME = "bibboxdocker_DockerContainer";
	public static final Object[][] TABLE_COLUMNS = {
			{ "dockerContainerId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "startCommand", Types.VARCHAR },
			{ "toolName", Types.VARCHAR },
			{ "instance", Types.VARCHAR },
			{ "port", Types.VARCHAR },
			{ "url", Types.VARCHAR },
			{ "subdomain", Types.VARCHAR },
			{ "ip", Types.VARCHAR },
			{ "displayName", Types.VARCHAR },
			{ "displayToolName", Types.VARCHAR },
			{ "category", Types.VARCHAR },
			{ "tool", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "company", Types.VARCHAR },
			{ "platform", Types.VARCHAR },
			{ "license", Types.VARCHAR },
			{ "toolDescription", Types.VARCHAR },
			{ "logourl", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("dockerContainerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("startCommand", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("toolName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("instance", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("port", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("url", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("subdomain", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ip", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("displayName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("displayToolName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("category", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tool", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("company", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("platform", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("license", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("toolDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("logourl", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table bibboxdocker_DockerContainer (dockerContainerId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,startCommand TEXT null,toolName VARCHAR(75) null,instance VARCHAR(75) null,port VARCHAR(75) null,url VARCHAR(75) null,subdomain VARCHAR(75) null,ip VARCHAR(75) null,displayName VARCHAR(75) null,displayToolName VARCHAR(75) null,category VARCHAR(75) null,tool VARCHAR(75) null,description TEXT null,company VARCHAR(75) null,platform VARCHAR(75) null,license VARCHAR(75) null,toolDescription TEXT null,logourl VARCHAR(150) null)";
	public static final String TABLE_SQL_DROP = "drop table bibboxdocker_DockerContainer";
	public static final String ORDER_BY_JPQL = " ORDER BY dockerContainer.dockerContainerId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY bibboxdocker_DockerContainer.dockerContainerId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.at.graz.meduni.bibbox.liferay.portlet.model.DockerContainer"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.at.graz.meduni.bibbox.liferay.portlet.model.DockerContainer"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.at.graz.meduni.bibbox.liferay.portlet.model.DockerContainer"),
			true);
	public static final long INSTANCE_COLUMN_BITMASK = 1L;
	public static final long TOOLNAME_COLUMN_BITMASK = 2L;
	public static final long DOCKERCONTAINERID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DockerContainer toModel(DockerContainerSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DockerContainer model = new DockerContainerImpl();

		model.setDockerContainerId(soapModel.getDockerContainerId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setStartCommand(soapModel.getStartCommand());
		model.setToolName(soapModel.getToolName());
		model.setInstance(soapModel.getInstance());
		model.setPort(soapModel.getPort());
		model.setUrl(soapModel.getUrl());
		model.setSubdomain(soapModel.getSubdomain());
		model.setIp(soapModel.getIp());
		model.setDisplayName(soapModel.getDisplayName());
		model.setDisplayToolName(soapModel.getDisplayToolName());
		model.setCategory(soapModel.getCategory());
		model.setTool(soapModel.getTool());
		model.setDescription(soapModel.getDescription());
		model.setCompany(soapModel.getCompany());
		model.setPlatform(soapModel.getPlatform());
		model.setLicense(soapModel.getLicense());
		model.setToolDescription(soapModel.getToolDescription());
		model.setLogourl(soapModel.getLogourl());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DockerContainer> toModels(
		DockerContainerSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DockerContainer> models = new ArrayList<DockerContainer>(soapModels.length);

		for (DockerContainerSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.at.graz.meduni.bibbox.liferay.portlet.model.DockerContainer"));

	public DockerContainerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dockerContainerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDockerContainerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dockerContainerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DockerContainer.class;
	}

	@Override
	public String getModelClassName() {
		return DockerContainer.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("dockerContainerId", getDockerContainerId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("startCommand", getStartCommand());
		attributes.put("toolName", getToolName());
		attributes.put("instance", getInstance());
		attributes.put("port", getPort());
		attributes.put("url", getUrl());
		attributes.put("subdomain", getSubdomain());
		attributes.put("ip", getIp());
		attributes.put("displayName", getDisplayName());
		attributes.put("displayToolName", getDisplayToolName());
		attributes.put("category", getCategory());
		attributes.put("tool", getTool());
		attributes.put("description", getDescription());
		attributes.put("company", getCompany());
		attributes.put("platform", getPlatform());
		attributes.put("license", getLicense());
		attributes.put("toolDescription", getToolDescription());
		attributes.put("logourl", getLogourl());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long dockerContainerId = (Long)attributes.get("dockerContainerId");

		if (dockerContainerId != null) {
			setDockerContainerId(dockerContainerId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String startCommand = (String)attributes.get("startCommand");

		if (startCommand != null) {
			setStartCommand(startCommand);
		}

		String toolName = (String)attributes.get("toolName");

		if (toolName != null) {
			setToolName(toolName);
		}

		String instance = (String)attributes.get("instance");

		if (instance != null) {
			setInstance(instance);
		}

		String port = (String)attributes.get("port");

		if (port != null) {
			setPort(port);
		}

		String url = (String)attributes.get("url");

		if (url != null) {
			setUrl(url);
		}

		String subdomain = (String)attributes.get("subdomain");

		if (subdomain != null) {
			setSubdomain(subdomain);
		}

		String ip = (String)attributes.get("ip");

		if (ip != null) {
			setIp(ip);
		}

		String displayName = (String)attributes.get("displayName");

		if (displayName != null) {
			setDisplayName(displayName);
		}

		String displayToolName = (String)attributes.get("displayToolName");

		if (displayToolName != null) {
			setDisplayToolName(displayToolName);
		}

		String category = (String)attributes.get("category");

		if (category != null) {
			setCategory(category);
		}

		String tool = (String)attributes.get("tool");

		if (tool != null) {
			setTool(tool);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String company = (String)attributes.get("company");

		if (company != null) {
			setCompany(company);
		}

		String platform = (String)attributes.get("platform");

		if (platform != null) {
			setPlatform(platform);
		}

		String license = (String)attributes.get("license");

		if (license != null) {
			setLicense(license);
		}

		String toolDescription = (String)attributes.get("toolDescription");

		if (toolDescription != null) {
			setToolDescription(toolDescription);
		}

		String logourl = (String)attributes.get("logourl");

		if (logourl != null) {
			setLogourl(logourl);
		}
	}

	@JSON
	@Override
	public long getDockerContainerId() {
		return _dockerContainerId;
	}

	@Override
	public void setDockerContainerId(long dockerContainerId) {
		_columnBitmask = -1L;

		_dockerContainerId = dockerContainerId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getStartCommand() {
		if (_startCommand == null) {
			return StringPool.BLANK;
		}
		else {
			return _startCommand;
		}
	}

	@Override
	public void setStartCommand(String startCommand) {
		_startCommand = startCommand;
	}

	@JSON
	@Override
	public String getToolName() {
		if (_toolName == null) {
			return StringPool.BLANK;
		}
		else {
			return _toolName;
		}
	}

	@Override
	public void setToolName(String toolName) {
		_columnBitmask |= TOOLNAME_COLUMN_BITMASK;

		if (_originalToolName == null) {
			_originalToolName = _toolName;
		}

		_toolName = toolName;
	}

	public String getOriginalToolName() {
		return GetterUtil.getString(_originalToolName);
	}

	@JSON
	@Override
	public String getInstance() {
		if (_instance == null) {
			return StringPool.BLANK;
		}
		else {
			return _instance;
		}
	}

	@Override
	public void setInstance(String instance) {
		_columnBitmask |= INSTANCE_COLUMN_BITMASK;

		if (_originalInstance == null) {
			_originalInstance = _instance;
		}

		_instance = instance;
	}

	public String getOriginalInstance() {
		return GetterUtil.getString(_originalInstance);
	}

	@JSON
	@Override
	public String getPort() {
		if (_port == null) {
			return StringPool.BLANK;
		}
		else {
			return _port;
		}
	}

	@Override
	public void setPort(String port) {
		_port = port;
	}

	@JSON
	@Override
	public String getUrl() {
		if (_url == null) {
			return StringPool.BLANK;
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		_url = url;
	}

	@JSON
	@Override
	public String getSubdomain() {
		if (_subdomain == null) {
			return StringPool.BLANK;
		}
		else {
			return _subdomain;
		}
	}

	@Override
	public void setSubdomain(String subdomain) {
		_subdomain = subdomain;
	}

	@JSON
	@Override
	public String getIp() {
		if (_ip == null) {
			return StringPool.BLANK;
		}
		else {
			return _ip;
		}
	}

	@Override
	public void setIp(String ip) {
		_ip = ip;
	}

	@JSON
	@Override
	public String getDisplayName() {
		if (_displayName == null) {
			return StringPool.BLANK;
		}
		else {
			return _displayName;
		}
	}

	@Override
	public void setDisplayName(String displayName) {
		_displayName = displayName;
	}

	@JSON
	@Override
	public String getDisplayToolName() {
		if (_displayToolName == null) {
			return StringPool.BLANK;
		}
		else {
			return _displayToolName;
		}
	}

	@Override
	public void setDisplayToolName(String displayToolName) {
		_displayToolName = displayToolName;
	}

	@JSON
	@Override
	public String getCategory() {
		if (_category == null) {
			return StringPool.BLANK;
		}
		else {
			return _category;
		}
	}

	@Override
	public void setCategory(String category) {
		_category = category;
	}

	@JSON
	@Override
	public String getTool() {
		if (_tool == null) {
			return StringPool.BLANK;
		}
		else {
			return _tool;
		}
	}

	@Override
	public void setTool(String tool) {
		_tool = tool;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public String getCompany() {
		if (_company == null) {
			return StringPool.BLANK;
		}
		else {
			return _company;
		}
	}

	@Override
	public void setCompany(String company) {
		_company = company;
	}

	@JSON
	@Override
	public String getPlatform() {
		if (_platform == null) {
			return StringPool.BLANK;
		}
		else {
			return _platform;
		}
	}

	@Override
	public void setPlatform(String platform) {
		_platform = platform;
	}

	@JSON
	@Override
	public String getLicense() {
		if (_license == null) {
			return StringPool.BLANK;
		}
		else {
			return _license;
		}
	}

	@Override
	public void setLicense(String license) {
		_license = license;
	}

	@JSON
	@Override
	public String getToolDescription() {
		if (_toolDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _toolDescription;
		}
	}

	@Override
	public void setToolDescription(String toolDescription) {
		_toolDescription = toolDescription;
	}

	@JSON
	@Override
	public String getLogourl() {
		if (_logourl == null) {
			return StringPool.BLANK;
		}
		else {
			return _logourl;
		}
	}

	@Override
	public void setLogourl(String logourl) {
		_logourl = logourl;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			DockerContainer.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DockerContainer toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DockerContainer)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DockerContainerImpl dockerContainerImpl = new DockerContainerImpl();

		dockerContainerImpl.setDockerContainerId(getDockerContainerId());
		dockerContainerImpl.setGroupId(getGroupId());
		dockerContainerImpl.setCompanyId(getCompanyId());
		dockerContainerImpl.setUserId(getUserId());
		dockerContainerImpl.setUserName(getUserName());
		dockerContainerImpl.setCreateDate(getCreateDate());
		dockerContainerImpl.setModifiedDate(getModifiedDate());
		dockerContainerImpl.setStartCommand(getStartCommand());
		dockerContainerImpl.setToolName(getToolName());
		dockerContainerImpl.setInstance(getInstance());
		dockerContainerImpl.setPort(getPort());
		dockerContainerImpl.setUrl(getUrl());
		dockerContainerImpl.setSubdomain(getSubdomain());
		dockerContainerImpl.setIp(getIp());
		dockerContainerImpl.setDisplayName(getDisplayName());
		dockerContainerImpl.setDisplayToolName(getDisplayToolName());
		dockerContainerImpl.setCategory(getCategory());
		dockerContainerImpl.setTool(getTool());
		dockerContainerImpl.setDescription(getDescription());
		dockerContainerImpl.setCompany(getCompany());
		dockerContainerImpl.setPlatform(getPlatform());
		dockerContainerImpl.setLicense(getLicense());
		dockerContainerImpl.setToolDescription(getToolDescription());
		dockerContainerImpl.setLogourl(getLogourl());

		dockerContainerImpl.resetOriginalValues();

		return dockerContainerImpl;
	}

	@Override
	public int compareTo(DockerContainer dockerContainer) {
		int value = 0;

		if (getDockerContainerId() < dockerContainer.getDockerContainerId()) {
			value = -1;
		}
		else if (getDockerContainerId() > dockerContainer.getDockerContainerId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DockerContainer)) {
			return false;
		}

		DockerContainer dockerContainer = (DockerContainer)obj;

		long primaryKey = dockerContainer.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		DockerContainerModelImpl dockerContainerModelImpl = this;

		dockerContainerModelImpl._setModifiedDate = false;

		dockerContainerModelImpl._originalToolName = dockerContainerModelImpl._toolName;

		dockerContainerModelImpl._originalInstance = dockerContainerModelImpl._instance;

		dockerContainerModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DockerContainer> toCacheModel() {
		DockerContainerCacheModel dockerContainerCacheModel = new DockerContainerCacheModel();

		dockerContainerCacheModel.dockerContainerId = getDockerContainerId();

		dockerContainerCacheModel.groupId = getGroupId();

		dockerContainerCacheModel.companyId = getCompanyId();

		dockerContainerCacheModel.userId = getUserId();

		dockerContainerCacheModel.userName = getUserName();

		String userName = dockerContainerCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			dockerContainerCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			dockerContainerCacheModel.createDate = createDate.getTime();
		}
		else {
			dockerContainerCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dockerContainerCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dockerContainerCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		dockerContainerCacheModel.startCommand = getStartCommand();

		String startCommand = dockerContainerCacheModel.startCommand;

		if ((startCommand != null) && (startCommand.length() == 0)) {
			dockerContainerCacheModel.startCommand = null;
		}

		dockerContainerCacheModel.toolName = getToolName();

		String toolName = dockerContainerCacheModel.toolName;

		if ((toolName != null) && (toolName.length() == 0)) {
			dockerContainerCacheModel.toolName = null;
		}

		dockerContainerCacheModel.instance = getInstance();

		String instance = dockerContainerCacheModel.instance;

		if ((instance != null) && (instance.length() == 0)) {
			dockerContainerCacheModel.instance = null;
		}

		dockerContainerCacheModel.port = getPort();

		String port = dockerContainerCacheModel.port;

		if ((port != null) && (port.length() == 0)) {
			dockerContainerCacheModel.port = null;
		}

		dockerContainerCacheModel.url = getUrl();

		String url = dockerContainerCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			dockerContainerCacheModel.url = null;
		}

		dockerContainerCacheModel.subdomain = getSubdomain();

		String subdomain = dockerContainerCacheModel.subdomain;

		if ((subdomain != null) && (subdomain.length() == 0)) {
			dockerContainerCacheModel.subdomain = null;
		}

		dockerContainerCacheModel.ip = getIp();

		String ip = dockerContainerCacheModel.ip;

		if ((ip != null) && (ip.length() == 0)) {
			dockerContainerCacheModel.ip = null;
		}

		dockerContainerCacheModel.displayName = getDisplayName();

		String displayName = dockerContainerCacheModel.displayName;

		if ((displayName != null) && (displayName.length() == 0)) {
			dockerContainerCacheModel.displayName = null;
		}

		dockerContainerCacheModel.displayToolName = getDisplayToolName();

		String displayToolName = dockerContainerCacheModel.displayToolName;

		if ((displayToolName != null) && (displayToolName.length() == 0)) {
			dockerContainerCacheModel.displayToolName = null;
		}

		dockerContainerCacheModel.category = getCategory();

		String category = dockerContainerCacheModel.category;

		if ((category != null) && (category.length() == 0)) {
			dockerContainerCacheModel.category = null;
		}

		dockerContainerCacheModel.tool = getTool();

		String tool = dockerContainerCacheModel.tool;

		if ((tool != null) && (tool.length() == 0)) {
			dockerContainerCacheModel.tool = null;
		}

		dockerContainerCacheModel.description = getDescription();

		String description = dockerContainerCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			dockerContainerCacheModel.description = null;
		}

		dockerContainerCacheModel.company = getCompany();

		String company = dockerContainerCacheModel.company;

		if ((company != null) && (company.length() == 0)) {
			dockerContainerCacheModel.company = null;
		}

		dockerContainerCacheModel.platform = getPlatform();

		String platform = dockerContainerCacheModel.platform;

		if ((platform != null) && (platform.length() == 0)) {
			dockerContainerCacheModel.platform = null;
		}

		dockerContainerCacheModel.license = getLicense();

		String license = dockerContainerCacheModel.license;

		if ((license != null) && (license.length() == 0)) {
			dockerContainerCacheModel.license = null;
		}

		dockerContainerCacheModel.toolDescription = getToolDescription();

		String toolDescription = dockerContainerCacheModel.toolDescription;

		if ((toolDescription != null) && (toolDescription.length() == 0)) {
			dockerContainerCacheModel.toolDescription = null;
		}

		dockerContainerCacheModel.logourl = getLogourl();

		String logourl = dockerContainerCacheModel.logourl;

		if ((logourl != null) && (logourl.length() == 0)) {
			dockerContainerCacheModel.logourl = null;
		}

		return dockerContainerCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(49);

		sb.append("{dockerContainerId=");
		sb.append(getDockerContainerId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", startCommand=");
		sb.append(getStartCommand());
		sb.append(", toolName=");
		sb.append(getToolName());
		sb.append(", instance=");
		sb.append(getInstance());
		sb.append(", port=");
		sb.append(getPort());
		sb.append(", url=");
		sb.append(getUrl());
		sb.append(", subdomain=");
		sb.append(getSubdomain());
		sb.append(", ip=");
		sb.append(getIp());
		sb.append(", displayName=");
		sb.append(getDisplayName());
		sb.append(", displayToolName=");
		sb.append(getDisplayToolName());
		sb.append(", category=");
		sb.append(getCategory());
		sb.append(", tool=");
		sb.append(getTool());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", company=");
		sb.append(getCompany());
		sb.append(", platform=");
		sb.append(getPlatform());
		sb.append(", license=");
		sb.append(getLicense());
		sb.append(", toolDescription=");
		sb.append(getToolDescription());
		sb.append(", logourl=");
		sb.append(getLogourl());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(76);

		sb.append("<model><model-name>");
		sb.append("at.graz.meduni.bibbox.liferay.portlet.model.DockerContainer");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>dockerContainerId</column-name><column-value><![CDATA[");
		sb.append(getDockerContainerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startCommand</column-name><column-value><![CDATA[");
		sb.append(getStartCommand());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>toolName</column-name><column-value><![CDATA[");
		sb.append(getToolName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>instance</column-name><column-value><![CDATA[");
		sb.append(getInstance());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>port</column-name><column-value><![CDATA[");
		sb.append(getPort());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>url</column-name><column-value><![CDATA[");
		sb.append(getUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subdomain</column-name><column-value><![CDATA[");
		sb.append(getSubdomain());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ip</column-name><column-value><![CDATA[");
		sb.append(getIp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>displayName</column-name><column-value><![CDATA[");
		sb.append(getDisplayName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>displayToolName</column-name><column-value><![CDATA[");
		sb.append(getDisplayToolName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>category</column-name><column-value><![CDATA[");
		sb.append(getCategory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tool</column-name><column-value><![CDATA[");
		sb.append(getTool());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>company</column-name><column-value><![CDATA[");
		sb.append(getCompany());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>platform</column-name><column-value><![CDATA[");
		sb.append(getPlatform());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>license</column-name><column-value><![CDATA[");
		sb.append(getLicense());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>toolDescription</column-name><column-value><![CDATA[");
		sb.append(getToolDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>logourl</column-name><column-value><![CDATA[");
		sb.append(getLogourl());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = DockerContainer.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			DockerContainer.class
		};
	private long _dockerContainerId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _startCommand;
	private String _toolName;
	private String _originalToolName;
	private String _instance;
	private String _originalInstance;
	private String _port;
	private String _url;
	private String _subdomain;
	private String _ip;
	private String _displayName;
	private String _displayToolName;
	private String _category;
	private String _tool;
	private String _description;
	private String _company;
	private String _platform;
	private String _license;
	private String _toolDescription;
	private String _logourl;
	private long _columnBitmask;
	private DockerContainer _escapedModel;
}