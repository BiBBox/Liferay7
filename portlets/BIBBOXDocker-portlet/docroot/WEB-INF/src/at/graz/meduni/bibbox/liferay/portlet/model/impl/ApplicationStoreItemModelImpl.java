/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.graz.meduni.bibbox.liferay.portlet.model.impl;

import aQute.bnd.annotation.ProviderType;

import at.graz.meduni.bibbox.liferay.portlet.model.ApplicationStoreItem;
import at.graz.meduni.bibbox.liferay.portlet.model.ApplicationStoreItemModel;
import at.graz.meduni.bibbox.liferay.portlet.model.ApplicationStoreItemSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ApplicationStoreItem service. Represents a row in the &quot;bibboxdocker_ApplicationStoreItem&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ApplicationStoreItemModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ApplicationStoreItemImpl}.
 * </p>
 *
 * @author Robert Reihs
 * @see ApplicationStoreItemImpl
 * @see ApplicationStoreItem
 * @see ApplicationStoreItemModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ApplicationStoreItemModelImpl extends BaseModelImpl<ApplicationStoreItem>
	implements ApplicationStoreItemModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a application store item model instance should use the {@link ApplicationStoreItem} interface instead.
	 */
	public static final String TABLE_NAME = "bibboxdocker_ApplicationStoreItem";
	public static final Object[][] TABLE_COLUMNS = {
			{ "applicationStoreItemId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "githash", Types.VARCHAR },
			{ "depreciated", Types.BOOLEAN },
			{ "applicationFolderName", Types.VARCHAR },
			{ "applicationName", Types.VARCHAR },
			{ "applicationShortName", Types.VARCHAR },
			{ "applicationVersion", Types.VARCHAR },
			{ "applicationReleaseState", Types.VARCHAR },
			{ "applicationDescription", Types.VARCHAR },
			{ "applicationCatalogueUrl", Types.VARCHAR },
			{ "applicationApplicationUrl", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("applicationStoreItemId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("githash", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("depreciated", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("applicationFolderName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicationName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicationShortName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicationVersion", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicationReleaseState", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicationDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicationCatalogueUrl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicationApplicationUrl", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table bibboxdocker_ApplicationStoreItem (applicationStoreItemId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,githash VARCHAR(75) null,depreciated BOOLEAN,applicationFolderName VARCHAR(75) null,applicationName VARCHAR(75) null,applicationShortName VARCHAR(75) null,applicationVersion VARCHAR(75) null,applicationReleaseState VARCHAR(75) null,applicationDescription TEXT null,applicationCatalogueUrl VARCHAR(200) null,applicationApplicationUrl VARCHAR(200) null)";
	public static final String TABLE_SQL_DROP = "drop table bibboxdocker_ApplicationStoreItem";
	public static final String ORDER_BY_JPQL = " ORDER BY applicationStoreItem.applicationName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY bibboxdocker_ApplicationStoreItem.applicationName ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.at.graz.meduni.bibbox.liferay.portlet.model.ApplicationStoreItem"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.at.graz.meduni.bibbox.liferay.portlet.model.ApplicationStoreItem"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.at.graz.meduni.bibbox.liferay.portlet.model.ApplicationStoreItem"),
			true);
	public static final long APPLICATIONNAME_COLUMN_BITMASK = 1L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ApplicationStoreItem toModel(
		ApplicationStoreItemSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ApplicationStoreItem model = new ApplicationStoreItemImpl();

		model.setApplicationStoreItemId(soapModel.getApplicationStoreItemId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setGithash(soapModel.getGithash());
		model.setDepreciated(soapModel.getDepreciated());
		model.setApplicationFolderName(soapModel.getApplicationFolderName());
		model.setApplicationName(soapModel.getApplicationName());
		model.setApplicationShortName(soapModel.getApplicationShortName());
		model.setApplicationVersion(soapModel.getApplicationVersion());
		model.setApplicationReleaseState(soapModel.getApplicationReleaseState());
		model.setApplicationDescription(soapModel.getApplicationDescription());
		model.setApplicationCatalogueUrl(soapModel.getApplicationCatalogueUrl());
		model.setApplicationApplicationUrl(soapModel.getApplicationApplicationUrl());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ApplicationStoreItem> toModels(
		ApplicationStoreItemSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ApplicationStoreItem> models = new ArrayList<ApplicationStoreItem>(soapModels.length);

		for (ApplicationStoreItemSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.at.graz.meduni.bibbox.liferay.portlet.model.ApplicationStoreItem"));

	public ApplicationStoreItemModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _applicationStoreItemId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setApplicationStoreItemId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _applicationStoreItemId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ApplicationStoreItem.class;
	}

	@Override
	public String getModelClassName() {
		return ApplicationStoreItem.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("applicationStoreItemId", getApplicationStoreItemId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("githash", getGithash());
		attributes.put("depreciated", getDepreciated());
		attributes.put("applicationFolderName", getApplicationFolderName());
		attributes.put("applicationName", getApplicationName());
		attributes.put("applicationShortName", getApplicationShortName());
		attributes.put("applicationVersion", getApplicationVersion());
		attributes.put("applicationReleaseState", getApplicationReleaseState());
		attributes.put("applicationDescription", getApplicationDescription());
		attributes.put("applicationCatalogueUrl", getApplicationCatalogueUrl());
		attributes.put("applicationApplicationUrl",
			getApplicationApplicationUrl());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long applicationStoreItemId = (Long)attributes.get(
				"applicationStoreItemId");

		if (applicationStoreItemId != null) {
			setApplicationStoreItemId(applicationStoreItemId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String githash = (String)attributes.get("githash");

		if (githash != null) {
			setGithash(githash);
		}

		Boolean depreciated = (Boolean)attributes.get("depreciated");

		if (depreciated != null) {
			setDepreciated(depreciated);
		}

		String applicationFolderName = (String)attributes.get(
				"applicationFolderName");

		if (applicationFolderName != null) {
			setApplicationFolderName(applicationFolderName);
		}

		String applicationName = (String)attributes.get("applicationName");

		if (applicationName != null) {
			setApplicationName(applicationName);
		}

		String applicationShortName = (String)attributes.get(
				"applicationShortName");

		if (applicationShortName != null) {
			setApplicationShortName(applicationShortName);
		}

		String applicationVersion = (String)attributes.get("applicationVersion");

		if (applicationVersion != null) {
			setApplicationVersion(applicationVersion);
		}

		String applicationReleaseState = (String)attributes.get(
				"applicationReleaseState");

		if (applicationReleaseState != null) {
			setApplicationReleaseState(applicationReleaseState);
		}

		String applicationDescription = (String)attributes.get(
				"applicationDescription");

		if (applicationDescription != null) {
			setApplicationDescription(applicationDescription);
		}

		String applicationCatalogueUrl = (String)attributes.get(
				"applicationCatalogueUrl");

		if (applicationCatalogueUrl != null) {
			setApplicationCatalogueUrl(applicationCatalogueUrl);
		}

		String applicationApplicationUrl = (String)attributes.get(
				"applicationApplicationUrl");

		if (applicationApplicationUrl != null) {
			setApplicationApplicationUrl(applicationApplicationUrl);
		}
	}

	@JSON
	@Override
	public long getApplicationStoreItemId() {
		return _applicationStoreItemId;
	}

	@Override
	public void setApplicationStoreItemId(long applicationStoreItemId) {
		_applicationStoreItemId = applicationStoreItemId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getGithash() {
		if (_githash == null) {
			return StringPool.BLANK;
		}
		else {
			return _githash;
		}
	}

	@Override
	public void setGithash(String githash) {
		_githash = githash;
	}

	@JSON
	@Override
	public Boolean getDepreciated() {
		return _depreciated;
	}

	@Override
	public void setDepreciated(Boolean depreciated) {
		_depreciated = depreciated;
	}

	@JSON
	@Override
	public String getApplicationFolderName() {
		if (_applicationFolderName == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicationFolderName;
		}
	}

	@Override
	public void setApplicationFolderName(String applicationFolderName) {
		_applicationFolderName = applicationFolderName;
	}

	@JSON
	@Override
	public String getApplicationName() {
		if (_applicationName == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicationName;
		}
	}

	@Override
	public void setApplicationName(String applicationName) {
		_columnBitmask = -1L;

		if (_originalApplicationName == null) {
			_originalApplicationName = _applicationName;
		}

		_applicationName = applicationName;
	}

	public String getOriginalApplicationName() {
		return GetterUtil.getString(_originalApplicationName);
	}

	@JSON
	@Override
	public String getApplicationShortName() {
		if (_applicationShortName == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicationShortName;
		}
	}

	@Override
	public void setApplicationShortName(String applicationShortName) {
		_applicationShortName = applicationShortName;
	}

	@JSON
	@Override
	public String getApplicationVersion() {
		if (_applicationVersion == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicationVersion;
		}
	}

	@Override
	public void setApplicationVersion(String applicationVersion) {
		_applicationVersion = applicationVersion;
	}

	@JSON
	@Override
	public String getApplicationReleaseState() {
		if (_applicationReleaseState == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicationReleaseState;
		}
	}

	@Override
	public void setApplicationReleaseState(String applicationReleaseState) {
		_applicationReleaseState = applicationReleaseState;
	}

	@JSON
	@Override
	public String getApplicationDescription() {
		if (_applicationDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicationDescription;
		}
	}

	@Override
	public void setApplicationDescription(String applicationDescription) {
		_applicationDescription = applicationDescription;
	}

	@JSON
	@Override
	public String getApplicationCatalogueUrl() {
		if (_applicationCatalogueUrl == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicationCatalogueUrl;
		}
	}

	@Override
	public void setApplicationCatalogueUrl(String applicationCatalogueUrl) {
		_applicationCatalogueUrl = applicationCatalogueUrl;
	}

	@JSON
	@Override
	public String getApplicationApplicationUrl() {
		if (_applicationApplicationUrl == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicationApplicationUrl;
		}
	}

	@Override
	public void setApplicationApplicationUrl(String applicationApplicationUrl) {
		_applicationApplicationUrl = applicationApplicationUrl;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ApplicationStoreItem.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ApplicationStoreItem toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ApplicationStoreItem)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ApplicationStoreItemImpl applicationStoreItemImpl = new ApplicationStoreItemImpl();

		applicationStoreItemImpl.setApplicationStoreItemId(getApplicationStoreItemId());
		applicationStoreItemImpl.setGroupId(getGroupId());
		applicationStoreItemImpl.setCompanyId(getCompanyId());
		applicationStoreItemImpl.setUserId(getUserId());
		applicationStoreItemImpl.setUserName(getUserName());
		applicationStoreItemImpl.setCreateDate(getCreateDate());
		applicationStoreItemImpl.setModifiedDate(getModifiedDate());
		applicationStoreItemImpl.setGithash(getGithash());
		applicationStoreItemImpl.setDepreciated(getDepreciated());
		applicationStoreItemImpl.setApplicationFolderName(getApplicationFolderName());
		applicationStoreItemImpl.setApplicationName(getApplicationName());
		applicationStoreItemImpl.setApplicationShortName(getApplicationShortName());
		applicationStoreItemImpl.setApplicationVersion(getApplicationVersion());
		applicationStoreItemImpl.setApplicationReleaseState(getApplicationReleaseState());
		applicationStoreItemImpl.setApplicationDescription(getApplicationDescription());
		applicationStoreItemImpl.setApplicationCatalogueUrl(getApplicationCatalogueUrl());
		applicationStoreItemImpl.setApplicationApplicationUrl(getApplicationApplicationUrl());

		applicationStoreItemImpl.resetOriginalValues();

		return applicationStoreItemImpl;
	}

	@Override
	public int compareTo(ApplicationStoreItem applicationStoreItem) {
		int value = 0;

		value = getApplicationName()
					.compareTo(applicationStoreItem.getApplicationName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ApplicationStoreItem)) {
			return false;
		}

		ApplicationStoreItem applicationStoreItem = (ApplicationStoreItem)obj;

		long primaryKey = applicationStoreItem.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ApplicationStoreItemModelImpl applicationStoreItemModelImpl = this;

		applicationStoreItemModelImpl._setModifiedDate = false;

		applicationStoreItemModelImpl._originalApplicationName = applicationStoreItemModelImpl._applicationName;

		applicationStoreItemModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ApplicationStoreItem> toCacheModel() {
		ApplicationStoreItemCacheModel applicationStoreItemCacheModel = new ApplicationStoreItemCacheModel();

		applicationStoreItemCacheModel.applicationStoreItemId = getApplicationStoreItemId();

		applicationStoreItemCacheModel.groupId = getGroupId();

		applicationStoreItemCacheModel.companyId = getCompanyId();

		applicationStoreItemCacheModel.userId = getUserId();

		applicationStoreItemCacheModel.userName = getUserName();

		String userName = applicationStoreItemCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			applicationStoreItemCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			applicationStoreItemCacheModel.createDate = createDate.getTime();
		}
		else {
			applicationStoreItemCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			applicationStoreItemCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			applicationStoreItemCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		applicationStoreItemCacheModel.githash = getGithash();

		String githash = applicationStoreItemCacheModel.githash;

		if ((githash != null) && (githash.length() == 0)) {
			applicationStoreItemCacheModel.githash = null;
		}

		applicationStoreItemCacheModel.depreciated = getDepreciated();

		applicationStoreItemCacheModel.applicationFolderName = getApplicationFolderName();

		String applicationFolderName = applicationStoreItemCacheModel.applicationFolderName;

		if ((applicationFolderName != null) &&
				(applicationFolderName.length() == 0)) {
			applicationStoreItemCacheModel.applicationFolderName = null;
		}

		applicationStoreItemCacheModel.applicationName = getApplicationName();

		String applicationName = applicationStoreItemCacheModel.applicationName;

		if ((applicationName != null) && (applicationName.length() == 0)) {
			applicationStoreItemCacheModel.applicationName = null;
		}

		applicationStoreItemCacheModel.applicationShortName = getApplicationShortName();

		String applicationShortName = applicationStoreItemCacheModel.applicationShortName;

		if ((applicationShortName != null) &&
				(applicationShortName.length() == 0)) {
			applicationStoreItemCacheModel.applicationShortName = null;
		}

		applicationStoreItemCacheModel.applicationVersion = getApplicationVersion();

		String applicationVersion = applicationStoreItemCacheModel.applicationVersion;

		if ((applicationVersion != null) && (applicationVersion.length() == 0)) {
			applicationStoreItemCacheModel.applicationVersion = null;
		}

		applicationStoreItemCacheModel.applicationReleaseState = getApplicationReleaseState();

		String applicationReleaseState = applicationStoreItemCacheModel.applicationReleaseState;

		if ((applicationReleaseState != null) &&
				(applicationReleaseState.length() == 0)) {
			applicationStoreItemCacheModel.applicationReleaseState = null;
		}

		applicationStoreItemCacheModel.applicationDescription = getApplicationDescription();

		String applicationDescription = applicationStoreItemCacheModel.applicationDescription;

		if ((applicationDescription != null) &&
				(applicationDescription.length() == 0)) {
			applicationStoreItemCacheModel.applicationDescription = null;
		}

		applicationStoreItemCacheModel.applicationCatalogueUrl = getApplicationCatalogueUrl();

		String applicationCatalogueUrl = applicationStoreItemCacheModel.applicationCatalogueUrl;

		if ((applicationCatalogueUrl != null) &&
				(applicationCatalogueUrl.length() == 0)) {
			applicationStoreItemCacheModel.applicationCatalogueUrl = null;
		}

		applicationStoreItemCacheModel.applicationApplicationUrl = getApplicationApplicationUrl();

		String applicationApplicationUrl = applicationStoreItemCacheModel.applicationApplicationUrl;

		if ((applicationApplicationUrl != null) &&
				(applicationApplicationUrl.length() == 0)) {
			applicationStoreItemCacheModel.applicationApplicationUrl = null;
		}

		return applicationStoreItemCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(35);

		sb.append("{applicationStoreItemId=");
		sb.append(getApplicationStoreItemId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", githash=");
		sb.append(getGithash());
		sb.append(", depreciated=");
		sb.append(getDepreciated());
		sb.append(", applicationFolderName=");
		sb.append(getApplicationFolderName());
		sb.append(", applicationName=");
		sb.append(getApplicationName());
		sb.append(", applicationShortName=");
		sb.append(getApplicationShortName());
		sb.append(", applicationVersion=");
		sb.append(getApplicationVersion());
		sb.append(", applicationReleaseState=");
		sb.append(getApplicationReleaseState());
		sb.append(", applicationDescription=");
		sb.append(getApplicationDescription());
		sb.append(", applicationCatalogueUrl=");
		sb.append(getApplicationCatalogueUrl());
		sb.append(", applicationApplicationUrl=");
		sb.append(getApplicationApplicationUrl());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(55);

		sb.append("<model><model-name>");
		sb.append(
			"at.graz.meduni.bibbox.liferay.portlet.model.ApplicationStoreItem");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>applicationStoreItemId</column-name><column-value><![CDATA[");
		sb.append(getApplicationStoreItemId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>githash</column-name><column-value><![CDATA[");
		sb.append(getGithash());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>depreciated</column-name><column-value><![CDATA[");
		sb.append(getDepreciated());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicationFolderName</column-name><column-value><![CDATA[");
		sb.append(getApplicationFolderName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicationName</column-name><column-value><![CDATA[");
		sb.append(getApplicationName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicationShortName</column-name><column-value><![CDATA[");
		sb.append(getApplicationShortName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicationVersion</column-name><column-value><![CDATA[");
		sb.append(getApplicationVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicationReleaseState</column-name><column-value><![CDATA[");
		sb.append(getApplicationReleaseState());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicationDescription</column-name><column-value><![CDATA[");
		sb.append(getApplicationDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicationCatalogueUrl</column-name><column-value><![CDATA[");
		sb.append(getApplicationCatalogueUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicationApplicationUrl</column-name><column-value><![CDATA[");
		sb.append(getApplicationApplicationUrl());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ApplicationStoreItem.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ApplicationStoreItem.class
		};
	private long _applicationStoreItemId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _githash;
	private Boolean _depreciated;
	private String _applicationFolderName;
	private String _applicationName;
	private String _originalApplicationName;
	private String _applicationShortName;
	private String _applicationVersion;
	private String _applicationReleaseState;
	private String _applicationDescription;
	private String _applicationCatalogueUrl;
	private String _applicationApplicationUrl;
	private long _columnBitmask;
	private ApplicationStoreItem _escapedModel;
}