/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.graz.meduni.bibbox.liferay.portlet.model.impl;

import aQute.bnd.annotation.ProviderType;

import at.graz.meduni.bibbox.liferay.portlet.model.BibboxKit;
import at.graz.meduni.bibbox.liferay.portlet.model.BibboxKitModel;
import at.graz.meduni.bibbox.liferay.portlet.model.BibboxKitSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the BibboxKit service. Represents a row in the &quot;bibboxdocker_BibboxKit&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link BibboxKitModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BibboxKitImpl}.
 * </p>
 *
 * @author Robert Reihs
 * @see BibboxKitImpl
 * @see BibboxKit
 * @see BibboxKitModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class BibboxKitModelImpl extends BaseModelImpl<BibboxKit>
	implements BibboxKitModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a bibbox kit model instance should use the {@link BibboxKit} interface instead.
	 */
	public static final String TABLE_NAME = "bibboxdocker_BibboxKit";
	public static final Object[][] TABLE_COLUMNS = {
			{ "bibboxKitId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "kitName", Types.VARCHAR },
			{ "applicationStoreItemId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("bibboxKitId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("kitName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicationStoreItemId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table bibboxdocker_BibboxKit (bibboxKitId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,kitName VARCHAR(75) null,applicationStoreItemId LONG)";
	public static final String TABLE_SQL_DROP = "drop table bibboxdocker_BibboxKit";
	public static final String ORDER_BY_JPQL = " ORDER BY bibboxKit.kitName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY bibboxdocker_BibboxKit.kitName ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.at.graz.meduni.bibbox.liferay.portlet.model.BibboxKit"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.at.graz.meduni.bibbox.liferay.portlet.model.BibboxKit"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.at.graz.meduni.bibbox.liferay.portlet.model.BibboxKit"),
			true);
	public static final long APPLICATIONSTOREITEMID_COLUMN_BITMASK = 1L;
	public static final long KITNAME_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static BibboxKit toModel(BibboxKitSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		BibboxKit model = new BibboxKitImpl();

		model.setBibboxKitId(soapModel.getBibboxKitId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setKitName(soapModel.getKitName());
		model.setApplicationStoreItemId(soapModel.getApplicationStoreItemId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<BibboxKit> toModels(BibboxKitSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<BibboxKit> models = new ArrayList<BibboxKit>(soapModels.length);

		for (BibboxKitSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.at.graz.meduni.bibbox.liferay.portlet.model.BibboxKit"));

	public BibboxKitModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _bibboxKitId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBibboxKitId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _bibboxKitId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BibboxKit.class;
	}

	@Override
	public String getModelClassName() {
		return BibboxKit.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("bibboxKitId", getBibboxKitId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("kitName", getKitName());
		attributes.put("applicationStoreItemId", getApplicationStoreItemId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long bibboxKitId = (Long)attributes.get("bibboxKitId");

		if (bibboxKitId != null) {
			setBibboxKitId(bibboxKitId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String kitName = (String)attributes.get("kitName");

		if (kitName != null) {
			setKitName(kitName);
		}

		Long applicationStoreItemId = (Long)attributes.get(
				"applicationStoreItemId");

		if (applicationStoreItemId != null) {
			setApplicationStoreItemId(applicationStoreItemId);
		}
	}

	@JSON
	@Override
	public long getBibboxKitId() {
		return _bibboxKitId;
	}

	@Override
	public void setBibboxKitId(long bibboxKitId) {
		_bibboxKitId = bibboxKitId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getKitName() {
		if (_kitName == null) {
			return StringPool.BLANK;
		}
		else {
			return _kitName;
		}
	}

	@Override
	public void setKitName(String kitName) {
		_columnBitmask = -1L;

		if (_originalKitName == null) {
			_originalKitName = _kitName;
		}

		_kitName = kitName;
	}

	public String getOriginalKitName() {
		return GetterUtil.getString(_originalKitName);
	}

	@JSON
	@Override
	public long getApplicationStoreItemId() {
		return _applicationStoreItemId;
	}

	@Override
	public void setApplicationStoreItemId(long applicationStoreItemId) {
		_columnBitmask |= APPLICATIONSTOREITEMID_COLUMN_BITMASK;

		if (!_setOriginalApplicationStoreItemId) {
			_setOriginalApplicationStoreItemId = true;

			_originalApplicationStoreItemId = _applicationStoreItemId;
		}

		_applicationStoreItemId = applicationStoreItemId;
	}

	public long getOriginalApplicationStoreItemId() {
		return _originalApplicationStoreItemId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			BibboxKit.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BibboxKit toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (BibboxKit)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BibboxKitImpl bibboxKitImpl = new BibboxKitImpl();

		bibboxKitImpl.setBibboxKitId(getBibboxKitId());
		bibboxKitImpl.setGroupId(getGroupId());
		bibboxKitImpl.setCompanyId(getCompanyId());
		bibboxKitImpl.setUserId(getUserId());
		bibboxKitImpl.setUserName(getUserName());
		bibboxKitImpl.setCreateDate(getCreateDate());
		bibboxKitImpl.setModifiedDate(getModifiedDate());
		bibboxKitImpl.setKitName(getKitName());
		bibboxKitImpl.setApplicationStoreItemId(getApplicationStoreItemId());

		bibboxKitImpl.resetOriginalValues();

		return bibboxKitImpl;
	}

	@Override
	public int compareTo(BibboxKit bibboxKit) {
		int value = 0;

		value = getKitName().compareTo(bibboxKit.getKitName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof BibboxKit)) {
			return false;
		}

		BibboxKit bibboxKit = (BibboxKit)obj;

		long primaryKey = bibboxKit.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		BibboxKitModelImpl bibboxKitModelImpl = this;

		bibboxKitModelImpl._setModifiedDate = false;

		bibboxKitModelImpl._originalKitName = bibboxKitModelImpl._kitName;

		bibboxKitModelImpl._originalApplicationStoreItemId = bibboxKitModelImpl._applicationStoreItemId;

		bibboxKitModelImpl._setOriginalApplicationStoreItemId = false;

		bibboxKitModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<BibboxKit> toCacheModel() {
		BibboxKitCacheModel bibboxKitCacheModel = new BibboxKitCacheModel();

		bibboxKitCacheModel.bibboxKitId = getBibboxKitId();

		bibboxKitCacheModel.groupId = getGroupId();

		bibboxKitCacheModel.companyId = getCompanyId();

		bibboxKitCacheModel.userId = getUserId();

		bibboxKitCacheModel.userName = getUserName();

		String userName = bibboxKitCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			bibboxKitCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			bibboxKitCacheModel.createDate = createDate.getTime();
		}
		else {
			bibboxKitCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			bibboxKitCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			bibboxKitCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		bibboxKitCacheModel.kitName = getKitName();

		String kitName = bibboxKitCacheModel.kitName;

		if ((kitName != null) && (kitName.length() == 0)) {
			bibboxKitCacheModel.kitName = null;
		}

		bibboxKitCacheModel.applicationStoreItemId = getApplicationStoreItemId();

		return bibboxKitCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{bibboxKitId=");
		sb.append(getBibboxKitId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", kitName=");
		sb.append(getKitName());
		sb.append(", applicationStoreItemId=");
		sb.append(getApplicationStoreItemId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("at.graz.meduni.bibbox.liferay.portlet.model.BibboxKit");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>bibboxKitId</column-name><column-value><![CDATA[");
		sb.append(getBibboxKitId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>kitName</column-name><column-value><![CDATA[");
		sb.append(getKitName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicationStoreItemId</column-name><column-value><![CDATA[");
		sb.append(getApplicationStoreItemId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = BibboxKit.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			BibboxKit.class
		};
	private long _bibboxKitId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _kitName;
	private String _originalKitName;
	private long _applicationStoreItemId;
	private long _originalApplicationStoreItemId;
	private boolean _setOriginalApplicationStoreItemId;
	private long _columnBitmask;
	private BibboxKit _escapedModel;
}