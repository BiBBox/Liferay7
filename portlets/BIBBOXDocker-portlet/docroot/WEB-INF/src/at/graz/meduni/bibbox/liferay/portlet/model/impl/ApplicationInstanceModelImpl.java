/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.graz.meduni.bibbox.liferay.portlet.model.impl;

import aQute.bnd.annotation.ProviderType;

import at.graz.meduni.bibbox.liferay.portlet.model.ApplicationInstance;
import at.graz.meduni.bibbox.liferay.portlet.model.ApplicationInstanceModel;
import at.graz.meduni.bibbox.liferay.portlet.model.ApplicationInstanceSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ApplicationInstance service. Represents a row in the &quot;bibboxdocker_ApplicationInstance&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ApplicationInstanceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ApplicationInstanceImpl}.
 * </p>
 *
 * @author Robert Reihs
 * @see ApplicationInstanceImpl
 * @see ApplicationInstance
 * @see ApplicationInstanceModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ApplicationInstanceModelImpl extends BaseModelImpl<ApplicationInstance>
	implements ApplicationInstanceModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a application instance model instance should use the {@link ApplicationInstance} interface instead.
	 */
	public static final String TABLE_NAME = "bibboxdocker_ApplicationInstance";
	public static final Object[][] TABLE_COLUMNS = {
			{ "applicationInstanceId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "instanceId", Types.VARCHAR },
			{ "name", Types.VARCHAR },
			{ "folderName", Types.VARCHAR },
			{ "shortName", Types.VARCHAR },
			{ "application", Types.VARCHAR },
			{ "version", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "installlog", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("applicationInstanceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("instanceId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("folderName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shortName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("application", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("version", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("installlog", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table bibboxdocker_ApplicationInstance (applicationInstanceId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,instanceId TEXT null,name TEXT null,folderName TEXT null,shortName TEXT null,application TEXT null,version TEXT null,description TEXT null,installlog TEXT null)";
	public static final String TABLE_SQL_DROP = "drop table bibboxdocker_ApplicationInstance";
	public static final String ORDER_BY_JPQL = " ORDER BY applicationInstance.folderName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY bibboxdocker_ApplicationInstance.folderName ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.at.graz.meduni.bibbox.liferay.portlet.model.ApplicationInstance"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.at.graz.meduni.bibbox.liferay.portlet.model.ApplicationInstance"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.at.graz.meduni.bibbox.liferay.portlet.model.ApplicationInstance"),
			true);
	public static final long FOLDERNAME_COLUMN_BITMASK = 1L;
	public static final long INSTANCEID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ApplicationInstance toModel(ApplicationInstanceSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ApplicationInstance model = new ApplicationInstanceImpl();

		model.setApplicationInstanceId(soapModel.getApplicationInstanceId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setInstanceId(soapModel.getInstanceId());
		model.setName(soapModel.getName());
		model.setFolderName(soapModel.getFolderName());
		model.setShortName(soapModel.getShortName());
		model.setApplication(soapModel.getApplication());
		model.setVersion(soapModel.getVersion());
		model.setDescription(soapModel.getDescription());
		model.setInstalllog(soapModel.getInstalllog());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ApplicationInstance> toModels(
		ApplicationInstanceSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ApplicationInstance> models = new ArrayList<ApplicationInstance>(soapModels.length);

		for (ApplicationInstanceSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.at.graz.meduni.bibbox.liferay.portlet.model.ApplicationInstance"));

	public ApplicationInstanceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _applicationInstanceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setApplicationInstanceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _applicationInstanceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ApplicationInstance.class;
	}

	@Override
	public String getModelClassName() {
		return ApplicationInstance.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("applicationInstanceId", getApplicationInstanceId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("instanceId", getInstanceId());
		attributes.put("name", getName());
		attributes.put("folderName", getFolderName());
		attributes.put("shortName", getShortName());
		attributes.put("application", getApplication());
		attributes.put("version", getVersion());
		attributes.put("description", getDescription());
		attributes.put("installlog", getInstalllog());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long applicationInstanceId = (Long)attributes.get(
				"applicationInstanceId");

		if (applicationInstanceId != null) {
			setApplicationInstanceId(applicationInstanceId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String instanceId = (String)attributes.get("instanceId");

		if (instanceId != null) {
			setInstanceId(instanceId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String folderName = (String)attributes.get("folderName");

		if (folderName != null) {
			setFolderName(folderName);
		}

		String shortName = (String)attributes.get("shortName");

		if (shortName != null) {
			setShortName(shortName);
		}

		String application = (String)attributes.get("application");

		if (application != null) {
			setApplication(application);
		}

		String version = (String)attributes.get("version");

		if (version != null) {
			setVersion(version);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String installlog = (String)attributes.get("installlog");

		if (installlog != null) {
			setInstalllog(installlog);
		}
	}

	@JSON
	@Override
	public long getApplicationInstanceId() {
		return _applicationInstanceId;
	}

	@Override
	public void setApplicationInstanceId(long applicationInstanceId) {
		_applicationInstanceId = applicationInstanceId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getInstanceId() {
		if (_instanceId == null) {
			return StringPool.BLANK;
		}
		else {
			return _instanceId;
		}
	}

	@Override
	public void setInstanceId(String instanceId) {
		_columnBitmask |= INSTANCEID_COLUMN_BITMASK;

		if (_originalInstanceId == null) {
			_originalInstanceId = _instanceId;
		}

		_instanceId = instanceId;
	}

	public String getOriginalInstanceId() {
		return GetterUtil.getString(_originalInstanceId);
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getFolderName() {
		if (_folderName == null) {
			return StringPool.BLANK;
		}
		else {
			return _folderName;
		}
	}

	@Override
	public void setFolderName(String folderName) {
		_columnBitmask = -1L;

		if (_originalFolderName == null) {
			_originalFolderName = _folderName;
		}

		_folderName = folderName;
	}

	public String getOriginalFolderName() {
		return GetterUtil.getString(_originalFolderName);
	}

	@JSON
	@Override
	public String getShortName() {
		if (_shortName == null) {
			return StringPool.BLANK;
		}
		else {
			return _shortName;
		}
	}

	@Override
	public void setShortName(String shortName) {
		_shortName = shortName;
	}

	@JSON
	@Override
	public String getApplication() {
		if (_application == null) {
			return StringPool.BLANK;
		}
		else {
			return _application;
		}
	}

	@Override
	public void setApplication(String application) {
		_application = application;
	}

	@JSON
	@Override
	public String getVersion() {
		if (_version == null) {
			return StringPool.BLANK;
		}
		else {
			return _version;
		}
	}

	@Override
	public void setVersion(String version) {
		_version = version;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public String getInstalllog() {
		if (_installlog == null) {
			return StringPool.BLANK;
		}
		else {
			return _installlog;
		}
	}

	@Override
	public void setInstalllog(String installlog) {
		_installlog = installlog;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ApplicationInstance.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ApplicationInstance toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ApplicationInstance)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ApplicationInstanceImpl applicationInstanceImpl = new ApplicationInstanceImpl();

		applicationInstanceImpl.setApplicationInstanceId(getApplicationInstanceId());
		applicationInstanceImpl.setGroupId(getGroupId());
		applicationInstanceImpl.setCompanyId(getCompanyId());
		applicationInstanceImpl.setUserId(getUserId());
		applicationInstanceImpl.setUserName(getUserName());
		applicationInstanceImpl.setCreateDate(getCreateDate());
		applicationInstanceImpl.setModifiedDate(getModifiedDate());
		applicationInstanceImpl.setInstanceId(getInstanceId());
		applicationInstanceImpl.setName(getName());
		applicationInstanceImpl.setFolderName(getFolderName());
		applicationInstanceImpl.setShortName(getShortName());
		applicationInstanceImpl.setApplication(getApplication());
		applicationInstanceImpl.setVersion(getVersion());
		applicationInstanceImpl.setDescription(getDescription());
		applicationInstanceImpl.setInstalllog(getInstalllog());

		applicationInstanceImpl.resetOriginalValues();

		return applicationInstanceImpl;
	}

	@Override
	public int compareTo(ApplicationInstance applicationInstance) {
		int value = 0;

		value = getFolderName().compareTo(applicationInstance.getFolderName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ApplicationInstance)) {
			return false;
		}

		ApplicationInstance applicationInstance = (ApplicationInstance)obj;

		long primaryKey = applicationInstance.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ApplicationInstanceModelImpl applicationInstanceModelImpl = this;

		applicationInstanceModelImpl._setModifiedDate = false;

		applicationInstanceModelImpl._originalInstanceId = applicationInstanceModelImpl._instanceId;

		applicationInstanceModelImpl._originalFolderName = applicationInstanceModelImpl._folderName;

		applicationInstanceModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ApplicationInstance> toCacheModel() {
		ApplicationInstanceCacheModel applicationInstanceCacheModel = new ApplicationInstanceCacheModel();

		applicationInstanceCacheModel.applicationInstanceId = getApplicationInstanceId();

		applicationInstanceCacheModel.groupId = getGroupId();

		applicationInstanceCacheModel.companyId = getCompanyId();

		applicationInstanceCacheModel.userId = getUserId();

		applicationInstanceCacheModel.userName = getUserName();

		String userName = applicationInstanceCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			applicationInstanceCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			applicationInstanceCacheModel.createDate = createDate.getTime();
		}
		else {
			applicationInstanceCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			applicationInstanceCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			applicationInstanceCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		applicationInstanceCacheModel.instanceId = getInstanceId();

		String instanceId = applicationInstanceCacheModel.instanceId;

		if ((instanceId != null) && (instanceId.length() == 0)) {
			applicationInstanceCacheModel.instanceId = null;
		}

		applicationInstanceCacheModel.name = getName();

		String name = applicationInstanceCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			applicationInstanceCacheModel.name = null;
		}

		applicationInstanceCacheModel.folderName = getFolderName();

		String folderName = applicationInstanceCacheModel.folderName;

		if ((folderName != null) && (folderName.length() == 0)) {
			applicationInstanceCacheModel.folderName = null;
		}

		applicationInstanceCacheModel.shortName = getShortName();

		String shortName = applicationInstanceCacheModel.shortName;

		if ((shortName != null) && (shortName.length() == 0)) {
			applicationInstanceCacheModel.shortName = null;
		}

		applicationInstanceCacheModel.application = getApplication();

		String application = applicationInstanceCacheModel.application;

		if ((application != null) && (application.length() == 0)) {
			applicationInstanceCacheModel.application = null;
		}

		applicationInstanceCacheModel.version = getVersion();

		String version = applicationInstanceCacheModel.version;

		if ((version != null) && (version.length() == 0)) {
			applicationInstanceCacheModel.version = null;
		}

		applicationInstanceCacheModel.description = getDescription();

		String description = applicationInstanceCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			applicationInstanceCacheModel.description = null;
		}

		applicationInstanceCacheModel.installlog = getInstalllog();

		String installlog = applicationInstanceCacheModel.installlog;

		if ((installlog != null) && (installlog.length() == 0)) {
			applicationInstanceCacheModel.installlog = null;
		}

		return applicationInstanceCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(31);

		sb.append("{applicationInstanceId=");
		sb.append(getApplicationInstanceId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", instanceId=");
		sb.append(getInstanceId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", folderName=");
		sb.append(getFolderName());
		sb.append(", shortName=");
		sb.append(getShortName());
		sb.append(", application=");
		sb.append(getApplication());
		sb.append(", version=");
		sb.append(getVersion());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", installlog=");
		sb.append(getInstalllog());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(49);

		sb.append("<model><model-name>");
		sb.append(
			"at.graz.meduni.bibbox.liferay.portlet.model.ApplicationInstance");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>applicationInstanceId</column-name><column-value><![CDATA[");
		sb.append(getApplicationInstanceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>instanceId</column-name><column-value><![CDATA[");
		sb.append(getInstanceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>folderName</column-name><column-value><![CDATA[");
		sb.append(getFolderName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shortName</column-name><column-value><![CDATA[");
		sb.append(getShortName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>application</column-name><column-value><![CDATA[");
		sb.append(getApplication());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>version</column-name><column-value><![CDATA[");
		sb.append(getVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>installlog</column-name><column-value><![CDATA[");
		sb.append(getInstalllog());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ApplicationInstance.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ApplicationInstance.class
		};
	private long _applicationInstanceId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _instanceId;
	private String _originalInstanceId;
	private String _name;
	private String _folderName;
	private String _originalFolderName;
	private String _shortName;
	private String _application;
	private String _version;
	private String _description;
	private String _installlog;
	private long _columnBitmask;
	private ApplicationInstance _escapedModel;
}