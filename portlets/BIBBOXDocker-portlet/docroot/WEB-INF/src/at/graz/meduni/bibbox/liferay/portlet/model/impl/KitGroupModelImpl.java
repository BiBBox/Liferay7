/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.graz.meduni.bibbox.liferay.portlet.model.impl;

import aQute.bnd.annotation.ProviderType;

import at.graz.meduni.bibbox.liferay.portlet.model.KitGroup;
import at.graz.meduni.bibbox.liferay.portlet.model.KitGroupModel;
import at.graz.meduni.bibbox.liferay.portlet.model.KitGroupSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the KitGroup service. Represents a row in the &quot;bibboxdocker_KitGroup&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link KitGroupModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link KitGroupImpl}.
 * </p>
 *
 * @author Robert Reihs
 * @see KitGroupImpl
 * @see KitGroup
 * @see KitGroupModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class KitGroupModelImpl extends BaseModelImpl<KitGroup>
	implements KitGroupModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a kit group model instance should use the {@link KitGroup} interface instead.
	 */
	public static final String TABLE_NAME = "bibboxdocker_KitGroup";
	public static final Object[][] TABLE_COLUMNS = {
			{ "kitGroupId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "group_", Types.VARCHAR },
			{ "applicationStoreItemId", Types.BIGINT },
			{ "bibboxKitId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("kitGroupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("group_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicationStoreItemId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("bibboxKitId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table bibboxdocker_KitGroup (kitGroupId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,group_ VARCHAR(75) null,applicationStoreItemId LONG,bibboxKitId LONG)";
	public static final String TABLE_SQL_DROP = "drop table bibboxdocker_KitGroup";
	public static final String ORDER_BY_JPQL = " ORDER BY kitGroup.group ASC";
	public static final String ORDER_BY_SQL = " ORDER BY bibboxdocker_KitGroup.group_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.at.graz.meduni.bibbox.liferay.portlet.model.KitGroup"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.at.graz.meduni.bibbox.liferay.portlet.model.KitGroup"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.at.graz.meduni.bibbox.liferay.portlet.model.KitGroup"),
			true);
	public static final long APPLICATIONSTOREITEMID_COLUMN_BITMASK = 1L;
	public static final long BIBBOXKITID_COLUMN_BITMASK = 2L;
	public static final long GROUP_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static KitGroup toModel(KitGroupSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		KitGroup model = new KitGroupImpl();

		model.setKitGroupId(soapModel.getKitGroupId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setGroup(soapModel.getGroup());
		model.setApplicationStoreItemId(soapModel.getApplicationStoreItemId());
		model.setBibboxKitId(soapModel.getBibboxKitId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<KitGroup> toModels(KitGroupSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<KitGroup> models = new ArrayList<KitGroup>(soapModels.length);

		for (KitGroupSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.at.graz.meduni.bibbox.liferay.portlet.model.KitGroup"));

	public KitGroupModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _kitGroupId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setKitGroupId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _kitGroupId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return KitGroup.class;
	}

	@Override
	public String getModelClassName() {
		return KitGroup.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("kitGroupId", getKitGroupId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("group", getGroup());
		attributes.put("applicationStoreItemId", getApplicationStoreItemId());
		attributes.put("bibboxKitId", getBibboxKitId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long kitGroupId = (Long)attributes.get("kitGroupId");

		if (kitGroupId != null) {
			setKitGroupId(kitGroupId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String group = (String)attributes.get("group");

		if (group != null) {
			setGroup(group);
		}

		Long applicationStoreItemId = (Long)attributes.get(
				"applicationStoreItemId");

		if (applicationStoreItemId != null) {
			setApplicationStoreItemId(applicationStoreItemId);
		}

		Long bibboxKitId = (Long)attributes.get("bibboxKitId");

		if (bibboxKitId != null) {
			setBibboxKitId(bibboxKitId);
		}
	}

	@JSON
	@Override
	public long getKitGroupId() {
		return _kitGroupId;
	}

	@Override
	public void setKitGroupId(long kitGroupId) {
		_kitGroupId = kitGroupId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getGroup() {
		if (_group == null) {
			return StringPool.BLANK;
		}
		else {
			return _group;
		}
	}

	@Override
	public void setGroup(String group) {
		_columnBitmask = -1L;

		_group = group;
	}

	@JSON
	@Override
	public long getApplicationStoreItemId() {
		return _applicationStoreItemId;
	}

	@Override
	public void setApplicationStoreItemId(long applicationStoreItemId) {
		_columnBitmask |= APPLICATIONSTOREITEMID_COLUMN_BITMASK;

		if (!_setOriginalApplicationStoreItemId) {
			_setOriginalApplicationStoreItemId = true;

			_originalApplicationStoreItemId = _applicationStoreItemId;
		}

		_applicationStoreItemId = applicationStoreItemId;
	}

	public long getOriginalApplicationStoreItemId() {
		return _originalApplicationStoreItemId;
	}

	@JSON
	@Override
	public long getBibboxKitId() {
		return _bibboxKitId;
	}

	@Override
	public void setBibboxKitId(long bibboxKitId) {
		_columnBitmask |= BIBBOXKITID_COLUMN_BITMASK;

		if (!_setOriginalBibboxKitId) {
			_setOriginalBibboxKitId = true;

			_originalBibboxKitId = _bibboxKitId;
		}

		_bibboxKitId = bibboxKitId;
	}

	public long getOriginalBibboxKitId() {
		return _originalBibboxKitId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			KitGroup.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public KitGroup toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (KitGroup)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		KitGroupImpl kitGroupImpl = new KitGroupImpl();

		kitGroupImpl.setKitGroupId(getKitGroupId());
		kitGroupImpl.setGroupId(getGroupId());
		kitGroupImpl.setCompanyId(getCompanyId());
		kitGroupImpl.setUserId(getUserId());
		kitGroupImpl.setUserName(getUserName());
		kitGroupImpl.setCreateDate(getCreateDate());
		kitGroupImpl.setModifiedDate(getModifiedDate());
		kitGroupImpl.setGroup(getGroup());
		kitGroupImpl.setApplicationStoreItemId(getApplicationStoreItemId());
		kitGroupImpl.setBibboxKitId(getBibboxKitId());

		kitGroupImpl.resetOriginalValues();

		return kitGroupImpl;
	}

	@Override
	public int compareTo(KitGroup kitGroup) {
		int value = 0;

		value = getGroup().compareTo(kitGroup.getGroup());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof KitGroup)) {
			return false;
		}

		KitGroup kitGroup = (KitGroup)obj;

		long primaryKey = kitGroup.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		KitGroupModelImpl kitGroupModelImpl = this;

		kitGroupModelImpl._setModifiedDate = false;

		kitGroupModelImpl._originalApplicationStoreItemId = kitGroupModelImpl._applicationStoreItemId;

		kitGroupModelImpl._setOriginalApplicationStoreItemId = false;

		kitGroupModelImpl._originalBibboxKitId = kitGroupModelImpl._bibboxKitId;

		kitGroupModelImpl._setOriginalBibboxKitId = false;

		kitGroupModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<KitGroup> toCacheModel() {
		KitGroupCacheModel kitGroupCacheModel = new KitGroupCacheModel();

		kitGroupCacheModel.kitGroupId = getKitGroupId();

		kitGroupCacheModel.groupId = getGroupId();

		kitGroupCacheModel.companyId = getCompanyId();

		kitGroupCacheModel.userId = getUserId();

		kitGroupCacheModel.userName = getUserName();

		String userName = kitGroupCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			kitGroupCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			kitGroupCacheModel.createDate = createDate.getTime();
		}
		else {
			kitGroupCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			kitGroupCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			kitGroupCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		kitGroupCacheModel.group = getGroup();

		String group = kitGroupCacheModel.group;

		if ((group != null) && (group.length() == 0)) {
			kitGroupCacheModel.group = null;
		}

		kitGroupCacheModel.applicationStoreItemId = getApplicationStoreItemId();

		kitGroupCacheModel.bibboxKitId = getBibboxKitId();

		return kitGroupCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{kitGroupId=");
		sb.append(getKitGroupId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", group=");
		sb.append(getGroup());
		sb.append(", applicationStoreItemId=");
		sb.append(getApplicationStoreItemId());
		sb.append(", bibboxKitId=");
		sb.append(getBibboxKitId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("at.graz.meduni.bibbox.liferay.portlet.model.KitGroup");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>kitGroupId</column-name><column-value><![CDATA[");
		sb.append(getKitGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>group</column-name><column-value><![CDATA[");
		sb.append(getGroup());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicationStoreItemId</column-name><column-value><![CDATA[");
		sb.append(getApplicationStoreItemId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bibboxKitId</column-name><column-value><![CDATA[");
		sb.append(getBibboxKitId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = KitGroup.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			KitGroup.class
		};
	private long _kitGroupId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _group;
	private long _applicationStoreItemId;
	private long _originalApplicationStoreItemId;
	private boolean _setOriginalApplicationStoreItemId;
	private long _bibboxKitId;
	private long _originalBibboxKitId;
	private boolean _setOriginalBibboxKitId;
	private long _columnBitmask;
	private KitGroup _escapedModel;
}